{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"WandX Documentation WandX is a secure way to trade digital assets with a custom Basket protocol enabling users to hedge and balance out risk. In this documentation, we describe all the products built by WandX, how the community can use these products, as well as how different players in the crypto space can use our products. This is done through tutorials, SDK and API documentation. Navigation Getting Started : The objective of this documentation is to create an open source repository for developers and companies to be able to use the various products built by WandX to further their development goals. These products include: A decentralized exchange built on the NEO Blockchain, AION Blockchain, Wanchain Blockchain. We have SDKs and APIs that enables any existing exchange or upcoming exchange to integrate our decentralized exchange on any of the above Blockchains in less than a few hours. We have built a micro-app that enables any token based website to enable their users to trade their Token within their website itself. The custom Basket Protocol that enables users to trade in portfolios of Tokens on either the Ethereum Blockchain, NEO Blockchain, AION Blockchain, Wanchain Blockchain. This protocol can be applied in various ways: a. To enable users to hedge their portfolios, to buy into a Basket of say exchange Tokens. b. To build a decentralized ETF kind of application. c. To trade in large amounts of a single Token, entirely peer to peer, without affecting the price of the Token. The Tokens can be ERC20 Tokens, WRC20 Tokens, ATS Tokens, or NEP5 Tokens. We have built backend infrastructure for the AION, Wanchain, NEO, EOS Blockchains to make it easy for any Dapp developers to be able to develop on any of these Blockchains. Dapp developers do not need to worry about connecting to the Blockchain, making calls to the Blockchain etc. All that would be taken care of by the infra that we've built. Tutorials : Watch some our video tutorials, as well as go through our tutorial documentation to integrate our Basket Protocol into your application, our DEX into your exchange, or use our infrastructure built for AION, Wanchain, EOS, NEO to be able to build Dapps seamlessly on these Blockchains. Project Ideas : We'd be very interested to collaborate with projects building on our protocol, infrastructure, or on our DEX. Those interested to collaborate outside of our platform, but feel that the collaboration would be mutually beneficial, do fill out this form and we'll get in touch with you shortly. Smart Contracts : All our smart contracts built on Ethereum, NEO, AION, Wanchain can be seen on our Github Integrations : Users, developers, projects can integrate our protocol and architecture into their products. Additional Resources : Users can see additional resources over on our website and Blog Support and Community If you have any questions about WandX, you can get direct access to our team and other members of the community through Slack and Telegram. We are looking for integration partners to build on and expand WandX. WandX Community Telegram Slack Channel","title":"Home"},{"location":"#wandx-documentation","text":"WandX is a secure way to trade digital assets with a custom Basket protocol enabling users to hedge and balance out risk. In this documentation, we describe all the products built by WandX, how the community can use these products, as well as how different players in the crypto space can use our products. This is done through tutorials, SDK and API documentation.","title":"WandX Documentation"},{"location":"#navigation","text":"Getting Started : The objective of this documentation is to create an open source repository for developers and companies to be able to use the various products built by WandX to further their development goals. These products include: A decentralized exchange built on the NEO Blockchain, AION Blockchain, Wanchain Blockchain. We have SDKs and APIs that enables any existing exchange or upcoming exchange to integrate our decentralized exchange on any of the above Blockchains in less than a few hours. We have built a micro-app that enables any token based website to enable their users to trade their Token within their website itself. The custom Basket Protocol that enables users to trade in portfolios of Tokens on either the Ethereum Blockchain, NEO Blockchain, AION Blockchain, Wanchain Blockchain. This protocol can be applied in various ways: a. To enable users to hedge their portfolios, to buy into a Basket of say exchange Tokens. b. To build a decentralized ETF kind of application. c. To trade in large amounts of a single Token, entirely peer to peer, without affecting the price of the Token. The Tokens can be ERC20 Tokens, WRC20 Tokens, ATS Tokens, or NEP5 Tokens. We have built backend infrastructure for the AION, Wanchain, NEO, EOS Blockchains to make it easy for any Dapp developers to be able to develop on any of these Blockchains. Dapp developers do not need to worry about connecting to the Blockchain, making calls to the Blockchain etc. All that would be taken care of by the infra that we've built. Tutorials : Watch some our video tutorials, as well as go through our tutorial documentation to integrate our Basket Protocol into your application, our DEX into your exchange, or use our infrastructure built for AION, Wanchain, EOS, NEO to be able to build Dapps seamlessly on these Blockchains. Project Ideas : We'd be very interested to collaborate with projects building on our protocol, infrastructure, or on our DEX. Those interested to collaborate outside of our platform, but feel that the collaboration would be mutually beneficial, do fill out this form and we'll get in touch with you shortly. Smart Contracts : All our smart contracts built on Ethereum, NEO, AION, Wanchain can be seen on our Github Integrations : Users, developers, projects can integrate our protocol and architecture into their products. Additional Resources : Users can see additional resources over on our website and Blog","title":"Navigation"},{"location":"#support-and-community","text":"If you have any questions about WandX, you can get direct access to our team and other members of the community through Slack and Telegram. We are looking for integration partners to build on and expand WandX. WandX Community Telegram Slack Channel","title":"Support and Community"},{"location":"aionsmartcontracts/","text":"AION Smart Contracts - (Basket) One Way Dex DEx1WaySig Send the address along with token, fee value and verifier address. function DEx1WaySig( address _vault, address _feeCalculator, address _baseToken, address _aionToken, address _verifierAddr) Parameters Name Type Description Address_Vault String Value to change address _feeCalculator BigNumber Value to change address _baseToken BigNumber Value to change address _aionToken BigNumber Value to change address _verifierAddr Address Value to change killExchange Under Emergency cases to kill the exchange. function killExchange() Parameters Name Type Description updateVault To update the Wallet. function updateVault(address _vault) Parameters Name Type Description address _vault Address Vault Address updateExConfig Once verified Wallet and fee values are updated. function updateExConfig(address _wallet, address _verifierAddr, address _feeCalculator) Parameters Name Type Description address _wallet Address Wallet Address address _verifierAddr Address Address verification address _feeCalculator BigNumber Fee calculator isOrderSigned TO sign the Order using VRS Structure. function isOrderSigned(bytes32 _msgHash, uint8 v, bytes32 r, bytes32 s, address _signer) Parameters Name Type Description bytes32 _msgHash TxHash Transaction message hash uint8 v Boolean Signature module bytes32 r Boolean Signature module bytes32 s Boolean Signature module address _signer Address Signature address validExchangeFee Based on Sell and Buy token identifying the buy and sell value. function validExchangeFee(address _sellerFeeToken, address _buyerFeeToken, uint256 _sellerFeeValue, uint256 _buyrFeeValue) Parameters Name Type Description address _sellerFeeToken Address Seller Free tokens address _buyerFeeToken Address Buyer free tokens uint256 _sellerFeeValue String Seller fee value uint256 _buyrFeeValue String Buyer Fee value getFeeIndex Retreive the fee value. function getFeeIndex(address _token) Parameters Name Type Description address _token Address Token Address getTwoWayOrderHash Once the transaction is complete receieve the hash value which contains both side value. function getTwoWayOrderHash(address[] _sellerTokens, address[] _buyerTokens, uint256[] _sellerValues, uint256[] _buyerValues, address[5] _orderAddresses, uint256[5] _orderValues, bytes32 _orderID) Parameters Name Type Description address[] _sellerTokens Address Seller Tokens address[] _buyerTokens String Buyer Tokens uint256[] _sellerValues String Seller Value uint256[] _buyerValues String Buyer Value address[5] _orderAddresses Address Order Address uint256[5] _orderValues String Order Value bytes32 _orderID Boolean Order ID getOneWayOrderHashes Once the transaction is complete receieve the hash value which contains one side value function getOneWayOrderHashes(address[] _sellerTokens, address[] _buyerTokens, uint256[] _sellerValues, uint256[] _buyerValues, address[5] _orderAddresses, uint256[5] _orderValues, bytes32 _orderID) Parameters Name Type Description address[] _sellerTokens Address Seller Tokens address[] _buyerTokens Address Buyer Tokens uint256[] _sellerValues String Seller Value uint256[] _buyerValues String Buyer Value address[5] _orderAddresses Address Order Address uint256[5] _orderValues String Order Value bytes32 _orderID String Order ID getOrderHash Order hash can be retrieved here. function getOrderHash(address[] _tokens, uint256[] _counts, uint256 _pValue, uint256 _fValue, address _feeToken, address _maker, address _signer, bytes32 _orderID) Parameters Name Type Description address[] _tokens Address Token uint256[] _counts Address Token count uint256 _pValue String Signature module uint256 _fValue String Signature module address _feeToken String Fee token address _maker Address Maker Address address _signer Address Signature address bytes32 _orderID String Order ID trasnferTokens Can transfer tokens from one account to another. function trasnferTokens(address[] _sellerTokens, address[] _buyerTokens, uint256[] _sellerValues, uint256[] _buyerValues, address[5] _orderAddresses, uint256[5] _orderValues) Parameters Name Type Description address[] _sellerTokens Address Seller Tokens address[] _buyerTokens Address Buyer Tokens uint256[] _sellerValues String Seller Value uint256[] _buyerValues String Buyuer Value address[5] _orderAddresses Address Address of the order uint256[5] _orderValues String Value of the order basicSigValidations Validating the sign transactions. function basicSigValidations(address[5] _orderAddresses, uint8[2] _v, bytes32 _sr, bytes32 _ss, bytes32 _br, bytes32 _bs, bytes32 _sellerHash, bytes32 _buyerHash) Parameters Name Type Description address[5] _orderAddresses Address Order Address uint8[2] _v String Signature module bytes32 _sr String Signature module bytes32 _ss String Signature module bytes32 _br String Signature module bytes32 _bs String Signature module bytes32 _sellerHash TxHash Seller Trnsaction Hash bytes32 _buyerHash TxHash Buyer Transaction Hash oneWayFulfillPO One way portfolio verifications being fulfilled or not. function oneWayFulfillPO(address[] _sellerTokens, address[] _buyerTokens, uint256[] _sellerValues, uint256[] _buyerValues, address[5] _orderAddresses, uint256[5] _orderValues, uint8[2] _v, bytes32 _br, bytes32 _bs, bytes32 _sr, bytes32 _ss, bytes32 _orderID) Parameters Name Type Description address[] _sellerTokens Address Seller Tokens address[] _buyerTokens Address Buyer Tokens uint256[] _sellerValues String Seller Value uint256[] _buyerValues String Buyer Value address[5] _orderAddresses Address Order Address uint256[5] _orderValues String Order Values uint8[2] _v String Signature module bytes32 _br String Signature module bytes32 _bs String Signature module bytes32 _sr String Signature module bytes32 _ss String Signature module bytes32 _orderID String Order ID orderExists Verify if the order placed still exists or not. function orderExists(bytes32 _hash, bytes32 _orderID) Parameters Name Type Description bytes32 _hash TxHash Has Value bytes32 _orderID String Order ID validateAuthorization Validate a particular order is being authorized by the right individual or not. function validateAuthorization(address[] _sellerTokens, address[] _buyerTokens, uint256[] _sellerValues, uint256[] _buyerValues, address[5] _orderAddresses, uint256[5] _orderValues) Parameters Name Type Description address[] _sellerTokens Address Seller Tokens address[] _buyerTokens Address Buyer Tokens uint256[] _sellerValues String Seller Value uint256[] _buyerValues String Buyer Value address[5] _orderAddresses Address Order Address uint256[5] _orderValues String Order Value Two Way Dex DEx2WaySig Send the address along with token, fee value and verifier address and receive the has back again. function DEx2WaySig( address _vault, address _feeCalculator, address _baseToken, address _aionToken, address _verifierAddr) Parameters Name Type Description address _vault Address Valut Address address _feeCalculator String Fee calculator address _baseToken BigNumber Base token value address _aionToken Address aion token address address _verifierAddr Address Verifier Address recoverSignerAddr To recover the address of the sender. function recoverSignerAddr(bytes32 _msgHash, uint8 v, bytes32 r, bytes32 s) Parameters Name Type Description bytes32 _msgHash TxHash Transaction Hash uint8 v String Signature module bytes32 r String Signature module bytes32 s String Signature module twoWayFulfillPO Fulfilling the portfolio two ways. function twoWayFulfillPO(address[] _sellerTokens, address[] _buyerTokens, uint256[] _sellerValues, uint256[] _buyerValues, address[5] _orderAddresses, uint256[3] _orderValues, uint8[2] _v, bytes32 _br, bytes32 _bs, bytes32 _sr, bytes32 _ss, bytes32 _hash, bytes32 _orderID) Parameters Name Type Description address[] _sellerTokens Address Seller tokens address[] _buyerTokens Address Buyer Tokens uint256[] _sellerValues String Seller value uint256[] _buyerValues String Buyer value address[5] _orderAddresses Address Order address uint256[5] _orderValues String Value of orders placed uint8[2] _v String Signature module bytes32 _br String Signature module bytes32 _bs String Signature module bytes32 _sr String Signature module bytes32 _ss String Signature module bytes32 _hash Hash Hash value bytes32 _orderID String Order ID Very Basic Portfolio VBP VBP Very basic portfolio sending all parameters, which include owner address, assets, volume of assets, ask value, expiry block, portfolio name. function VBP(address _owner, address[] _assets, uint256[] _volumes, uint256 _askValue, uint256 _expiryBlock, bytes32 _portfolioName) Parameters Name Type Description address _owner Address Owner address address[] _assets Address Asset address uint256[] _volumes String Trade volume uint256 _askValue String Ask value for the basket uint256 _expiryBlock String Block expiry time bytes32 _portfolioName String Portfoli Name updatePortfolio Update a portfolio that was already created. function updatePortfolio (uint256 _askValue, uint256 _expiresAfter, address[] _assets, uint256[] _volumes, bytes32 _portfolioName) Parameters Name Type Description uint256 _askValue String Ask value for the basket uint256 _expiresAfter String Block expiry time address[] _assets Address Asset address uint256[] _volumes String Volume of the asset bytes32 _portfolioName String Portfolio Name locateAsset TO identify where the assets have moved to. function locateAsset(address _keyAsset) Parameters Name Type Description address _keyAsset Address Key asset address updateAssets Update the assets that had already been set in the basket. function updateAssets(address[] _assets, uint256[] _volumes) Parameters Name Type Description address[] _assets Address Asset address uint256[] _volumes String Total volume depositTokens Deposit tokens into the basket. function depositTokens(address _token, uint _amount) Parameters Name Type Description address _token Address Token Address uint _amount String Total amount balanceOfToken Findn out the balance of token in the contract. function balanceOfToken(address _depositor, address _token) Parameters Name Type Description address _depositor Address Depositor address address _token Address Token address withdrawToken Withdraw tokens from basket. function withdrawToken(address _token, uint256 _amount) Parameters Name Type Description address _token Address Token address uint256 _amount String Total Amount liquidate Liquidate tokens from my basket. function liquidate() Parameters Name Type Description publish Publish my basket. function publish() Parameters Name Type Description cancelPortfolio Cancel my portfolio that had been created. function cancelPortfolio() Parameters Name Type Description buy Buy a particular basket that is available. function buy() Parameters Name Type Description moveAssets Move assets from one address to another. function moveAssets(address _from, address _to) Parameters Name Type Description address _from Address Senders address address _to Address Receivers address VBP Exchange VBPExchange Very basic portfolio exchange main function. function VBPExchange(address _storage, address _calc, address _proxy, address _token) Parameters Name Type Description address _storage Address Storage address address _calc Address Fee calculator address address _proxy Address Proxy address address _token Address Address of the token updateExchange Update the vbp exchange. function updateExchange(address _storage, address _calc, address _proxy, address _token) Parameters Name Type Description address _storage Address Token storage address address _calc String Address calculator address _proxy String Proxy Address address _token String Token Address getPortfolioHash Get a particular portfolio hash. function getPortfolioHash(address _maker, address[] _assets, uint256[] _volumes, uint256 _askValue, uint256 _expiryBlock, bytes32 _name) Parameters Name Type Description address _maker Address maker Address address[] _assets Address Asset Address uint256[] _volumes String Transactions Volume uint256 _askValue String Ask Value uint256 _expiryBlock String Block Expiry bytes32 _name String String Name getFee Get fee based on arket value for a particular basket. function getFee(uint256 _askValue, uint256 _feeIndex) Parameters Name Type Description uint256 _askValue String Ask Value uint256 _feeIndex String Fee Index createPortfolio Create a basket portfolio function createPortfolio(address _maker, address[] _assets, uint256[] _volumes, uint256 _askValue, uint256 _expiryBlock, bytes32 _name) Parameters Name Type Description address _maker Address Maker Address address[] _assets Address Asset Address uint256[] _volumes String Trade volume uint256 _askValue String Ask Value uint256 _expiryBlock String Block expiry bytes32 _name String Name Recurrent Portfolio RecurrentPortfolio RecurrentPortfolios Recurrent portfolio main function which is used to repeat a particualr portfolio. function RecurrentPortfolios(address _owner, address _wallet, address[] _assets, uint256[] _volumes, uint256 _askValue, uint256 _feeRateForaion, uint256 _expiryBlock, bytes32 _portfolioName) Parameters Name Type Description address _owner Address Owner address address _wallet Address Wallet address address[] _assets Address Asset address uint256[] _volumes String Volume of the basket uint256 _askValue String Ask value for the basket uint256 _feeRateForaion String Fee rate for aion uint256 _expiryBlock String Block expiry time bytes32 _portfolioName String Portfolio Name updatePortfolio Update a particular portfolio. function updatePortfolio (uint256 _askValue, uint256 _expiresAfter, address[] _assets, uint256[] _volumes, bytes32 _portfolioName) Parameters Name Type Description uint256 _askValue String Ask value of the basket uint256 _expiresAfter String Expiry time address[] _assets Address Asset address uint256[] _volumes String Volume of the basket bytes32 _portfolioName String Name of the portfolio locateAsset Locate assets on my dashboard. function locateAsset(address _keyAsset) Parameters Name Type Description address _keyAsset Address Key asset address updateAssets Update assets once transaction are complete. function updateAssets(address[] _assets, uint256[] _volumes) Parameters Name Type Description address[] _assets Address Asset address uint256[] _volumes String Volume of tokens depositTokens Deposit tokens into my account. function depositTokens(address _token, uint _amount) Parameters Name Type Description address _token Address Token address uint _amount String Amount balanceOfToken Get token banalnce in my account. function balanceOfToken(address _depositor, address _token) Parameters Name Type Description address _depositor Address Depositer Address address _token Address Token Address withdrawToken Withdraw tokens from my account. function withdrawToken(address _token, uint256 _amount) Parameters Name Type Description address _token Address Token Address uint256 _amount String Amount liquidate Liquidate tokens in my account. function liquidate() Parameters Name Type Description getExchangeFee Get my exchange fee. function getExchangeFee() Parameters Name Type Description publish Publish my portfolio. function publish() Parameters Name Type Description cancelPortfolio Cancel my portfolio. function cancelPortfolio() Parameters Name Type Description buy Buy portfolio or tokens on a particular exchange. function buy(address _exchange) Parameters Name Type Description address _exchange Exchange address moveAssets Move asstes from one address to another. function moveAssets(address _from, address _to) Parameters Name Type Description address _from Address From address address _to Address To Address RecurrentPortfolio Exchange RPExchange Recurrent portfolio exchange main function. function RPExchange(address _storage, address _calc, address _proxy, address _token, address _wallet) Parameters Name Type Description address _storage Address Storage address address _calc String Address fee calculator address _proxy String Proxy Address address _token Address Token address address _wallet Address Wallet address updateExchange Update my exchange once transaction are complete. function updateExchange(address _storage, address _calc, address _proxy, address _token, address _wallet) Parameters Name Type Description address _storage Address Address storage address _calc String Address fee calculator address _proxy String Address proxy address _token Address Token address address _wallet Address Wallet address getPortfolioHash Get my portfoilio hash once the transaction is complete. function getPortfolioHash(address _maker, address[] _assets, uint256[] _volumes, uint256 _askValue, uint256 _expiryBlock, bytes32 _name) Parameters Name Type Description address _maker Address Maker address address[] _assets Address Asstes location address uint256[] _volumes String Volume of the basket uint256 _askValue String Ask value of the basket uint256 _expiryBlock String Block expiry time bytes32 _name String Name getFee Get fee of my tokens or portfoio on the exchange. function getFee(uint256 _askValue, uint256 _feeIndex) Parameters Name Type Description uint256 _askValue String Ask value of the basket uint256 _feeIndex String Trnsaction fee index value createPortfolio Create a portfolio on RP Exchange. function createPortfolio(address _maker, address[] _assets, uint256[] _volumes, uint256 _askValue, uint256 _expiryBlock, bytes32 _name) Parameters Name Type Description Order Book Authentication addAuthorizedAddress Add authorized addresses to echange. function addAuthorizedAddress(address _newAddress) Parameters Name Type Description address _newAddress Address New address removeAuthorizedAddress Remove already aurthorized addresses. function removeAuthorizedAddress(address _newAddress) Parameters Name Type Description address _newAddress Address New address changeApprover Change the approver who was already responsible for approving. function changeApprover(address _newApprover) Parameters Name Type Description address _newApprover Address New approver address changeOwner Change the owner of the portfolio or tokens or contract. function changeOwner(address _newOwner) Parameters Name Type Description address _newOwner Address New Owner address ecrecovery Recovering the signature hasg of every transaction. function ecrecovery(bytes32 _msgHash, uint8 v, bytes32 r, bytes32 s) Parameters Name Type Description bytes32 _msgHas Hash Message Hash uint8 v String Signature module bytes32 r String Signature module bytes32 s String Signature module Authentication Multi-Owner addOwnership Providing ownership to a particular newly added owner. function addOwnership(address _newOwner) Parameters Name Type Description address _newOwner Address New owner address removeOwnership Removing ownership. function removeOwnership(address _owner) Parameters Name Type Description address _owner Address Owner address changeApprover Cchange approver. function changeApprover(address _newApprover) Parameters Name Type Description address _newApprover Address New approver address changeOwner Change the owner of the contract. function changeOwner(address _newOwner) Parameters Name Type Description address _newOwner Address New Owner address OrderBook changeTraderConfig Trade configuration changes for orderbook can be made here. function changeTraderConfig(bool _tradeActive, address _dataStore, bool _isLocked) Parameters Name Type Description bool _tradeActive Boolean Trade active status address _dataStore Address Data store address bool _isLocked Boolean Locked status updateFeeCalcConfig function updateFeeCalcConfig(address _baseToken, address _aion, uint256 _baseTokenFee, uint256 _aionFee, uint256 _normalTokenFee) Parameters Name Type Description address _baseToken Address Base token address address _aion Address aion address uint256 _baseTokenFee String Base token fee uint256 _aionFee String aion fee uint256 _normalTokenFee Normal token fee calcTradeFee function calcTradeFee(uint256 _value, address _feeToken) Parameters Name Type Description uint256 _value String Value of tokens address _feeToken Address Token fee orderHash function orderHash(address _sellToken, address _buyToken, uint256 _totalOrderVolume, uint256 _priceRate, uint256 _numBlocksExpires, address _orderCreator, uint256 _orderType, bytes32 _orderID, address _feeToken) Parameters Name Type Description address _sellToken Address Sell token address address _buyToken Address Buy token address uint256 _totalOrderVolume String Total order volume uint256 _priceRate String Price Rate uint256 _numBlocksExpires String Block expiry time address _orderCreator Address Order creator address uint256 _orderType String Order type bytes32 _orderID String Order ID address _feeToken String Token Fee validateAndGetOrderHash function validateAndGetOrderHash (address[6] _tokensAndAddresses, uint256[6] _volumes, uint256 _numBlocksExpires, uint256 _orderType, bytes32 _orderID) Parameters Name Type Description address[6] _tokensAndAddresses Address Token address and count uint256[6] _volumes String Volume of tokens uint256 _numBlocksExpires String Block expiry time uint256 _orderType String Type of order bytes32 _orderID String Order ID verifySignature function verifySignature(address _signer, bytes32 _orderHash, uint8 v, bytes32 r, bytes32 s) Parameters Name Type Description address _signer Address Address of the individual who signed the transaction bytes32 _orderHash Tx Hash Order hash uint8 v String Signature Module bytes32 r String Signature Module bytes32 s String Signature Module basicSigValidations function basicSigValidations(address[6] _orderAddresses, uint256 _orderType, bytes32 _orderHash, uint8 v, bytes32 r, bytes32 s) Parameters Name Type Description address[6] _orderAddresses Address Orderer address uint256 _orderType String Order type bytes32 _orderHash TxHash Order hash uint8 v String Signature Module bytes32 r String Signature Module bytes32 s String Signature Module orderAvailability function orderAvailability(bytes32 _orderHash, address _orderCreator, uint256 _totalOrderVolume) Parameters Name Type Description bytes32 _orderHash TxHash Order Hash address _orderCreator Address Order Creator uint256 _totalOrderVolume String Total order volume isOrderClosedOrFulfilled function isOrderClosedOrFulfilled(bytes32 _orderHash, address _orderCreator, uint256 _totalOrderVolume) Parameters Name Type Description bytes32 _orderHash TxHash Orer Hash address _orderCreator Address Order Creator uint256 _totalOrderVolume String Total order volume oredrAlreadyExists function oredrAlreadyExists(bytes32 _orderHash, address _orderCreator) Parameters Name Type Description bytes32 _orderHash TxHash Order Hash address _orderCreator Address Order creator createOrder function createOrder(address _sellToken, address _buyToken, uint256 _totalOrderVolume, uint256 _priceRate, uint256 _numBlocksExpires, address _orderCreator, uint256 _orderType, bytes32 _orderID, address _feeToken) Parameters Name Type Description address _sellToken Address Sell token address _buyToken Address Buy token uint256 _totalOrderVolume String Total order volume uint256 _priceRate String Price rating uint256 _numBlocksExpires String Block expiry time address _orderCreator Address Order creator uint256 _orderType String Order type bytes32 _orderID String Order ID address _feeToken Address Token fee cancelOrder function cancelOrder(bytes32 _orderHash, address _orderCreator, uint256 _totalOrderVolume, address _feeToken, uint256 _orderValue) Name Type Description bytes32 _orderHash TxHash Order hash address _orderCreator Address Order creator uint256 _totalOrderVolume String Total volume of the order address _feeToken Address Token fee uint256 _orderValue String Value of the order fillOrder function fillOrder(address[6] _tokensAndAddresses, uint256[6] _volumes, uint256 _numBlocksExpires, uint256 _orderType, uint8 v, bytes32 r, bytes32 s, bytes32 _orderID) Parameters Name Type Description address[6] _tokensAndAddresses Address Value of tokens and also the address uint256[6] _volumes String Volume of the trade uint256 _numBlocksExpires String Block expiry time uint256 _orderType String Order type uint8 v String Signature module bytes32 r String Signature module bytes32 s String Signature module bytes32 _orderID String Order ID walletTransfers function walletTransfers(address[6] _tokensAndAddresses, uint256[6] _volumes) Parameters Name Type Description address[6] _tokensAndAddresses Address Tokens and address to send uint256[6] _volumes String Volume of the trade orderMatchHash function orderMatchHash(address[6] _tokensAndAddresses, uint256[5] _volumes, bytes32 _orderMatchID, uint256 _expiryBlockNumber) Parameters Name Type Description address[6] _tokensAndAddresses Address uint256[5] _volumes String Total volume bytes32 _orderMatchID String Order match ID uint256 _expiryBlockNumber String Block expiry number fillOrderMatch function fillOrderMatch(address[6] _tokensAndAddresses, uint256[5] _volumes, uint256 _expiryBlockNumber, bytes32 _orderMatchID,uint8 v, bytes32 r, bytes32 s) Parameters Name Type Description address[6] _tokensAndAddresses Address Tokens and address uint256[5] _volumes String Total volume uint256 _expiryBlockNumber String Block expiry number bytes32 _orderMatchID String Order match ID uint8 v String Signature module bytes32 r String Signature module bytes32 s String Signature module balanceOf function balanceOf(address _depositor) Parameters Name Type Description address _depositor Address Depositor Address balanceOfToken function balanceOfToken(address _depositor, address _token) Parameters Name Type Description address _depositor Address Depositor Address address _token Address Token address deposit function deposit(address _depositor) Parameters Name Type Description address _depositor Address Depositor address depositTokens function depositTokens(address _depositor, address _token, uint256 _amount) Parameters Name Type Description address _depositor Address Depositor address address _token Address Token address uint256 _amount String Amount withdrawTo function withdrawTo(address _to, uint256 _amount) Parameters Name Type Description address _to Address Receivers address uint256 _amount String Total amount withdrawTokenTo function withdrawTokenTo(address _to, address _token, uint256 _amount) Parameters Name Type Description address _to Address Receivers address address _token Address Token address uint256 _amount String Total amount moveToSafetyWallet function moveToSafetyWallet() Parameters Name Type Description walletTransfer function walletTransfer(address _from, address _to, address _token, uint256 _amount) Parameters Name Type Description address _from Address Senders address address _to Address Receivers address address _token Address Token address uint256 _amount String Total amount OrderBook function OrderBook(address _newApprover, address _newWallet, address _dataStore) Parameters Name Type Description address _newApprover Address Approvers address address _newWallet Address New Wallet address address _dataStore Address Data store address Order Vault addOwner Add a particular owner to a vault. function addOwner(address newOwner) Parameters Name Type Description address newOwner Address New Owner address removeOwner Remove ownership of a particualar address. function removeOwner(address _owner) Parameters Name Type Description address _owner Address Owner address OrderVault Order a new Vault. function OrderVault() Parameters Name Type Description openVault Opening up a new vault. function openVault(uint256 _startTime, uint256 _closureTime) Parameters Name Type Description uint256 _startTime String Start time of the vault uint256 _closureTime String Expiry time for the vault extendVault Extend the vault. function extendVault(uint256 _closureTime) Parameters Name Type Description uint256 _closureTime String Expiry time for the basket closeVault Closing the vault. function closeVault() Parameters Name Type Description storeInVault Store the values on the valut. function storeInVault(bytes32 _orderHash, bytes32 _orderID) Parameters Name Type Description bytes32 _orderHash TxHash Transaction Hash bytes32 _orderID String Order ID sealVault Set the value for a particular asset on the exchange. function sealVault() Parameters Name Type Description getNumberOfOders Get the number of orders on the exchange that are being placed. function getNumberOfOders() Parameters Name Type Description orderLocated Locate the order. Which address owns the new contract. function orderLocated(bytes32 _hash, bytes32 _orderID) Parameters Name Type Description bytes32 _hash String Transaction Hash bytes32 _orderID String Order ID Ownable Ownable Identify who own the contract. function Ownable() Parameters Name Type Description transferOwnership Transfer ownership from one address to another. function transferOwnership(address newOwner) Parameters Name Type Description address newOwner Address Address of the owner","title":"Aion"},{"location":"aionsmartcontracts/#aion-smart-contracts-basket","text":"","title":"AION Smart Contracts - (Basket)"},{"location":"aionsmartcontracts/#one-way-dex","text":"","title":"One Way Dex"},{"location":"aionsmartcontracts/#two-way-dex","text":"","title":"Two Way Dex"},{"location":"aionsmartcontracts/#very-basic-portfolio","text":"","title":"Very Basic Portfolio"},{"location":"aionsmartcontracts/#vbp","text":"","title":"VBP"},{"location":"aionsmartcontracts/#vbp-exchange","text":"","title":"VBP Exchange"},{"location":"aionsmartcontracts/#recurrent-portfolio","text":"","title":"Recurrent Portfolio"},{"location":"aionsmartcontracts/#recurrentportfolio","text":"","title":"RecurrentPortfolio"},{"location":"aionsmartcontracts/#recurrentportfolio-exchange","text":"","title":"RecurrentPortfolio Exchange"},{"location":"aionsmartcontracts/#order-book","text":"","title":"Order Book"},{"location":"aionsmartcontracts/#authentication","text":"","title":"Authentication"},{"location":"aionsmartcontracts/#authentication-multi-owner","text":"","title":"Authentication Multi-Owner"},{"location":"aionsmartcontracts/#orderbook","text":"","title":"OrderBook"},{"location":"aionsmartcontracts/#order-vault","text":"","title":"Order Vault"},{"location":"aionsmartcontracts/#ownable","text":"","title":"Ownable"},{"location":"basketprotocol/","text":"Basket Protocol Using the WandX Basket protocol to enable creation of Baskets of ERC20 or ERC223 Tokens, to enable trading a large amount of a single Token entirely peer to peer through a single transaction without affecting the price of the Token as there wouldn't be any API through which the price is determined. Trading Protocol WandX has successfully launched a protocol that allows users to create and trade baskets of ERC20 tokens through smart contracts. Baskets are customized bundles of ERC20 tokens, specified by the user. For example, as an owner of these tokens, I could create a Basket of 100 EOS, 1000 KIN and 100 LRC on a smart contract. With the creation of this Basket, I would now be the owner of the smart contract that contains these tokens. Once created, I can then list the Basket for trade for an ask price, for example 2 ETH, which is posted on the already established smart contract. Once listed, another person or entity can assume ownership of this Token Basket by sending 2 ETH to that basket address. The Basket originator then receives the 2 ETH through the smart contract, while the person who sent the 2 ETH is the new owner of the basket. In this way, WandX has created a fully decentralized mechanism of creating trading ERC20 Token Baskets. The Token baskets can be integrated into any exchange or wallet that allows sign in through a users\u2019 private key, and subsequently executed by any wallet or exchange. Example Basket Transaction Let\u2019s better define how this transaction might work today Seller (and owner) of tokens defines and publishes basket Underlying tokens are deposited onto the smart contract which is still to this point owned by the Seller Buyer purchases basket using Ether Smart contract is executed Buyer gets the basket and thus ownership of the underlying tokens Seller gets the ether Buy Create a buy order Update or Cancel Buy Order Fill Order Sell Create a sell order Update or Cancel sell Order Fill Order","title":"Basket Protocol"},{"location":"basketprotocol/#basket-protocol","text":"Using the WandX Basket protocol to enable creation of Baskets of ERC20 or ERC223 Tokens, to enable trading a large amount of a single Token entirely peer to peer through a single transaction without affecting the price of the Token as there wouldn't be any API through which the price is determined.","title":"Basket Protocol"},{"location":"basketprotocol/#trading-protocol","text":"WandX has successfully launched a protocol that allows users to create and trade baskets of ERC20 tokens through smart contracts. Baskets are customized bundles of ERC20 tokens, specified by the user. For example, as an owner of these tokens, I could create a Basket of 100 EOS, 1000 KIN and 100 LRC on a smart contract. With the creation of this Basket, I would now be the owner of the smart contract that contains these tokens. Once created, I can then list the Basket for trade for an ask price, for example 2 ETH, which is posted on the already established smart contract. Once listed, another person or entity can assume ownership of this Token Basket by sending 2 ETH to that basket address. The Basket originator then receives the 2 ETH through the smart contract, while the person who sent the 2 ETH is the new owner of the basket. In this way, WandX has created a fully decentralized mechanism of creating trading ERC20 Token Baskets. The Token baskets can be integrated into any exchange or wallet that allows sign in through a users\u2019 private key, and subsequently executed by any wallet or exchange.","title":"Trading Protocol"},{"location":"basketprotocol/#example-basket-transaction","text":"Let\u2019s better define how this transaction might work today Seller (and owner) of tokens defines and publishes basket Underlying tokens are deposited onto the smart contract which is still to this point owned by the Seller Buyer purchases basket using Ether Smart contract is executed Buyer gets the basket and thus ownership of the underlying tokens Seller gets the ether","title":"Example Basket Transaction"},{"location":"basketprotocol/#buy","text":"","title":"Buy"},{"location":"basketprotocol/#create-a-buy-order","text":"","title":"Create a buy order"},{"location":"basketprotocol/#update-or-cancel-buy-order","text":"","title":"Update or Cancel Buy Order"},{"location":"basketprotocol/#fill-order","text":"","title":"Fill Order"},{"location":"basketprotocol/#sell","text":"","title":"Sell"},{"location":"basketprotocol/#create-a-sell-order","text":"","title":"Create a sell order"},{"location":"basketprotocol/#update-or-cancel-sell-order","text":"","title":"Update or Cancel sell Order"},{"location":"basketprotocol/#fill-order_1","text":"","title":"Fill Order"},{"location":"basketprotocolintegration/","text":"Basket Protocol Integration Integration of the Basket protocol with Exchanges Above architecture describes the integration of the Basket protocol with exchanges. The Basket protocol , created by the WandX team, enables users to create baskets of ERC20 Tokens and group them into a single unit which is stored on a smart contract. This document focuses on how exchanges can use the Basket protocol to offer Token Baskets to their customers. Initially, the exchange ( let's call it the ABC Exchange) needs to register with WandX and sign the needed documents. This can be done through an email interaction with abhinav.ramesh@wandx.co. After the agreement, the ABC Exchange will be a part of the Basket protocol. Whenever a User comes to the WandX platform and trades, they have the flexibility to create a Basket of tokens. Once the User create this basket, this basket is pushed onto the Basket Storage Contract. There is a two way communication between the Basket Storage Contract and the WandX platform, which means data gets updated every now and then on the Basket Storage Contract. As a part of this Basket protocol, the ABC Exchange has the flexibility to choose any of these Baskets from the Basket Storage Contract and trade these Baskets on their platform. Now users can come onto the ABC Exchange and purchase these Basket of tokens. Once the transaction is complete, the exchange profit fee goes to Exchange Wallet which is controlled by the WandX team. From this Exchange Wallet, exchange profit fee goes to Fee Distributor Contract which is owned by the WandX team, where the fee breaks down according to the Agreements signed between the ABC Exchange and Basket protocol and gets transferred to the ABC Exchange. All transactions happening during the process can be visible on Etherscan. Step 1 ABC exchange sends an integration request to the Basket protocol. Step 2 ABC Exchange will discuss and agree upon the terms and conditions related to the Basket protocol , with the WandX Team. The following details should be shared and agreed upon: Fee split ratio Frequency at which fee transfers should happen between WandX Team and ABC Exchange ABC Exchange address on the Etherscan. (Fees will be transferred to this address) Storage Contract address (WandX team will share this) Basket contract ABI (WandX team will share this) Code to extract the list of active Baskets from the Storage (From the contract shared above) Code to execute or call, Basket buy or trade methods Step 3 WandX Team will set up the ABC Exchange integration with the Basket protocol. Step 4 After the integration with Basket protocol, the ABC Exchange can extract and display the list of Baskets on their Exchange using the code shared in step 2. Step 5 ((only through the WandX platform)) The WandX Team can make Basket updates if any, and can push them onto the Basket Storage Contract. New Baskets can be published as and when users create them on the WandX platform. Step 6 Individual exchanges can build their own Basket interaction UI for all the methods like publish, update, cancel, buy, deposit, withdraw, buy. These methods are available for the Baskets that are created on WandX. The UI for these methods can be provided by WandX, and customized for each exchange. The ABI as shared in Step 2 will have the mandatory details to build this UI and interactions, the code for which is available only for buy or trade method interactions. Step 7 (new Basket creation) New Baskets can only be created on the WandX platform. Step 8 When a user tries to buy a Basket on an exchange, that exchange address (shared with the WandX Team in step 2) needs to be injected as a parameter into the Buy method. This address is mandatory to claim the Exchange trade fee. Refer the code shared in step 2. Step 9 When a buy transaction on ABC Exchange is executed successfully, the calculated Fees will be transferred into the Exchange Wallet (WandX team controls the Exchange Wallet). Step 10 When a buy transaction is executed successfully, the details like Basket ID, exchange address, trade fee will be available through events in the transaction. Anyone can go to etherscan and verify the transaction details and fee collection details. A transaction parsing job will be running in the background which identifies and processes the Basket related transactions, extracts the fee related details and generates/updates the Fee Collection Table (WandX Team controls this and will be shared with other exchanges on need basis). Step 11 Fee Distribution job will run on a weekly/monthly basis, and transferring of funds will happen as recorded in the fee table. Funds will be transferred to the Exchange account which has been shared in step 2.","title":"Basket Protocol Integration"},{"location":"basketprotocolintegration/#basket-protocol-integration","text":"Integration of the Basket protocol with Exchanges Above architecture describes the integration of the Basket protocol with exchanges. The Basket protocol , created by the WandX team, enables users to create baskets of ERC20 Tokens and group them into a single unit which is stored on a smart contract. This document focuses on how exchanges can use the Basket protocol to offer Token Baskets to their customers. Initially, the exchange ( let's call it the ABC Exchange) needs to register with WandX and sign the needed documents. This can be done through an email interaction with abhinav.ramesh@wandx.co. After the agreement, the ABC Exchange will be a part of the Basket protocol. Whenever a User comes to the WandX platform and trades, they have the flexibility to create a Basket of tokens. Once the User create this basket, this basket is pushed onto the Basket Storage Contract. There is a two way communication between the Basket Storage Contract and the WandX platform, which means data gets updated every now and then on the Basket Storage Contract. As a part of this Basket protocol, the ABC Exchange has the flexibility to choose any of these Baskets from the Basket Storage Contract and trade these Baskets on their platform. Now users can come onto the ABC Exchange and purchase these Basket of tokens. Once the transaction is complete, the exchange profit fee goes to Exchange Wallet which is controlled by the WandX team. From this Exchange Wallet, exchange profit fee goes to Fee Distributor Contract which is owned by the WandX team, where the fee breaks down according to the Agreements signed between the ABC Exchange and Basket protocol and gets transferred to the ABC Exchange. All transactions happening during the process can be visible on Etherscan.","title":"Basket Protocol Integration"},{"location":"basketprotocolintegration/#step-1","text":"ABC exchange sends an integration request to the Basket protocol.","title":"Step 1"},{"location":"basketprotocolintegration/#step-2","text":"ABC Exchange will discuss and agree upon the terms and conditions related to the Basket protocol , with the WandX Team. The following details should be shared and agreed upon: Fee split ratio Frequency at which fee transfers should happen between WandX Team and ABC Exchange ABC Exchange address on the Etherscan. (Fees will be transferred to this address) Storage Contract address (WandX team will share this) Basket contract ABI (WandX team will share this) Code to extract the list of active Baskets from the Storage (From the contract shared above) Code to execute or call, Basket buy or trade methods","title":"Step 2"},{"location":"basketprotocolintegration/#step-3","text":"WandX Team will set up the ABC Exchange integration with the Basket protocol.","title":"Step 3"},{"location":"basketprotocolintegration/#step-4","text":"After the integration with Basket protocol, the ABC Exchange can extract and display the list of Baskets on their Exchange using the code shared in step 2.","title":"Step 4"},{"location":"basketprotocolintegration/#step-5-only-through-the-wandx-platform","text":"The WandX Team can make Basket updates if any, and can push them onto the Basket Storage Contract. New Baskets can be published as and when users create them on the WandX platform.","title":"Step 5 ((only through the WandX platform))"},{"location":"basketprotocolintegration/#step-6","text":"Individual exchanges can build their own Basket interaction UI for all the methods like publish, update, cancel, buy, deposit, withdraw, buy. These methods are available for the Baskets that are created on WandX. The UI for these methods can be provided by WandX, and customized for each exchange. The ABI as shared in Step 2 will have the mandatory details to build this UI and interactions, the code for which is available only for buy or trade method interactions.","title":"Step 6"},{"location":"basketprotocolintegration/#step-7-new-basket-creation","text":"New Baskets can only be created on the WandX platform.","title":"Step 7 (new Basket creation)"},{"location":"basketprotocolintegration/#step-8","text":"When a user tries to buy a Basket on an exchange, that exchange address (shared with the WandX Team in step 2) needs to be injected as a parameter into the Buy method. This address is mandatory to claim the Exchange trade fee. Refer the code shared in step 2.","title":"Step 8"},{"location":"basketprotocolintegration/#step-9","text":"When a buy transaction on ABC Exchange is executed successfully, the calculated Fees will be transferred into the Exchange Wallet (WandX team controls the Exchange Wallet).","title":"Step 9"},{"location":"basketprotocolintegration/#step-10","text":"When a buy transaction is executed successfully, the details like Basket ID, exchange address, trade fee will be available through events in the transaction. Anyone can go to etherscan and verify the transaction details and fee collection details. A transaction parsing job will be running in the background which identifies and processes the Basket related transactions, extracts the fee related details and generates/updates the Fee Collection Table (WandX Team controls this and will be shared with other exchanges on need basis).","title":"Step 10"},{"location":"basketprotocolintegration/#step-11","text":"Fee Distribution job will run on a weekly/monthly basis, and transferring of funds will happen as recorded in the fee table. Funds will be transferred to the Exchange account which has been shared in step 2.","title":"Step 11"},{"location":"comingsoon/","text":"Coming Soon","title":"Coming Soon"},{"location":"comingsoon/#coming-soon","text":"","title":"Coming Soon"},{"location":"decentralizedexchange/","text":"Decentralized Exchange The WandX decentralized exchange built on the Ethereum platform enables users to trade ETH-ERC20 or ERC20-ERC20 through our escrow based smart contract. WandX decentralized exchange is an exchange market that does not rely on a third party service to hold the customer's funds. Instead, trades occur directly between users (peer to peer) through an automated process. This system can be achieved by creating proxy tokens (crypto assets that represent a certain fiat or crypto currency) or assets (that can represent shares in a company for example) or through a decentralized multi-signature escrow system, among other solutions that are currently being developed. This system contrasts with the current centralized model in which users deposit their funds and the exchange issues an IOU that can be freely traded on the platform. When a user asks to withdraw his funds, these are converted back into the cryptocurrency they represent and sent to their owner. Benefits The most obvious benefit to using a decentralized exchange over a centralized one is their \"trustless\" nature. You are not required to trust the security or honesty of the exchange since the funds are held by you in your personal wallet and not by a third party. Another advantage to the decentralized model is the privacy it provides. Users are not required to disclose their personal details to anyone, except if the exchange method involves bank transfers, in which case your identity is revealed only to the person that is selling or buying from you. Furthermore, the hosting of decentralized exchanges is distributed through nodes meaning that there is no risk of server downtime. One Way DEX Image will come here One way DEX Contracts Two Way DEX Image will come here Two way DEX Contracts Very Basic Portfolio VBP Contracts Republish Portfolio Republish Portfolio and Contracts Quotable Portfolio Image will come here Quotable Portfolio and Contracts For third parties to integrate our baskets, click here . Payment Channels Payment channels on Ethereum are used to enable multiple payments between two parties without paying gas fees for every transaction. This enables two parties to enter into a long term contract, while maintaining a regular payment scheduled that's automated on the payment smart contracts.","title":"Decentralized Exchange"},{"location":"decentralizedexchange/#decentralized-exchange","text":"The WandX decentralized exchange built on the Ethereum platform enables users to trade ETH-ERC20 or ERC20-ERC20 through our escrow based smart contract. WandX decentralized exchange is an exchange market that does not rely on a third party service to hold the customer's funds. Instead, trades occur directly between users (peer to peer) through an automated process. This system can be achieved by creating proxy tokens (crypto assets that represent a certain fiat or crypto currency) or assets (that can represent shares in a company for example) or through a decentralized multi-signature escrow system, among other solutions that are currently being developed. This system contrasts with the current centralized model in which users deposit their funds and the exchange issues an IOU that can be freely traded on the platform. When a user asks to withdraw his funds, these are converted back into the cryptocurrency they represent and sent to their owner.","title":"Decentralized Exchange"},{"location":"decentralizedexchange/#benefits","text":"The most obvious benefit to using a decentralized exchange over a centralized one is their \"trustless\" nature. You are not required to trust the security or honesty of the exchange since the funds are held by you in your personal wallet and not by a third party. Another advantage to the decentralized model is the privacy it provides. Users are not required to disclose their personal details to anyone, except if the exchange method involves bank transfers, in which case your identity is revealed only to the person that is selling or buying from you. Furthermore, the hosting of decentralized exchanges is distributed through nodes meaning that there is no risk of server downtime.","title":"Benefits"},{"location":"decentralizedexchange/#one-way-dex","text":"Image will come here One way DEX Contracts","title":"One Way DEX"},{"location":"decentralizedexchange/#two-way-dex","text":"Image will come here Two way DEX Contracts","title":"Two Way DEX"},{"location":"decentralizedexchange/#very-basic-portfolio","text":"VBP Contracts","title":"Very Basic Portfolio"},{"location":"decentralizedexchange/#republish-portfolio","text":"Republish Portfolio and Contracts","title":"Republish Portfolio"},{"location":"decentralizedexchange/#quotable-portfolio","text":"Image will come here Quotable Portfolio and Contracts For third parties to integrate our baskets, click here .","title":"Quotable Portfolio"},{"location":"decentralizedexchange/#payment-channels","text":"Payment channels on Ethereum are used to enable multiple payments between two parties without paying gas fees for every transaction. This enables two parties to enter into a long term contract, while maintaining a regular payment scheduled that's automated on the payment smart contracts.","title":"Payment Channels"},{"location":"furtherreference/","text":"Further Reference Advanced Topics Units and Natural Units Here, we cover how unit amounts are defined and calculated in WnadX tokens. In the ERC20 standard, each token has a base unit that is defined by its decimals property. For example, a WnadX token\u2019s decimals is 18, meaning its base unit is 10 ** -18 of one WnadX. Intuitively, it makes sense to tie a certain amount of a component\u2018s base unit to one WnadX token to calculate the component allocation of the WnadX. However, this becomes problematic when a component token has a significantly lower decimals value than a WnadX. Take for example Airswap (AST), which uses only 4 decimal places, this makes their token far less divisible. As a consequence, say we want to issue 10 ** 13 of a WnadX that contains AST, there\u2018s a chance that the issuance would require transferring partial amounts of an AST base unit, which is not possible, and thus would leave the WnadX token undercollateralized. To combat this problem, instead of tying component base unit amounts to one WnadX Token, we can tie the component base unit amounts to some quantity of WnadX token base units. This is what the natural unit of a WnadX is for: it defines the amount of WnadX token base units to tie component token amounts to. In order to make this work there is a lower bound on what the natural unit can be, which is 10 ** (18 - minimumDecimal) where minimumDecimal is the lowest decimal value of the component tokens comprising the WnadX. Furthermore in order to avoid rounding errors in issuance and redemption, all issue and redeem quantities must be multiples of the natural unit. For a more thorough treatment, including an example, see section 5.2.1 of our White Paper . Advanced Resources Whitepaper Contracts Github WandX Blog Posts WandX\u2019s Basket Protocol WandX Decentralized Exchange and basket protocol release 1.0 Paving The Future With Smart Contracts WandX : The Multi-Blockchain DEX and Basket protocol","title":"Further Referencece"},{"location":"furtherreference/#further-reference","text":"","title":"Further Reference"},{"location":"furtherreference/#advanced-topics","text":"","title":"Advanced Topics"},{"location":"furtherreference/#units-and-natural-units","text":"Here, we cover how unit amounts are defined and calculated in WnadX tokens. In the ERC20 standard, each token has a base unit that is defined by its decimals property. For example, a WnadX token\u2019s decimals is 18, meaning its base unit is 10 ** -18 of one WnadX. Intuitively, it makes sense to tie a certain amount of a component\u2018s base unit to one WnadX token to calculate the component allocation of the WnadX. However, this becomes problematic when a component token has a significantly lower decimals value than a WnadX. Take for example Airswap (AST), which uses only 4 decimal places, this makes their token far less divisible. As a consequence, say we want to issue 10 ** 13 of a WnadX that contains AST, there\u2018s a chance that the issuance would require transferring partial amounts of an AST base unit, which is not possible, and thus would leave the WnadX token undercollateralized. To combat this problem, instead of tying component base unit amounts to one WnadX Token, we can tie the component base unit amounts to some quantity of WnadX token base units. This is what the natural unit of a WnadX is for: it defines the amount of WnadX token base units to tie component token amounts to. In order to make this work there is a lower bound on what the natural unit can be, which is 10 ** (18 - minimumDecimal) where minimumDecimal is the lowest decimal value of the component tokens comprising the WnadX. Furthermore in order to avoid rounding errors in issuance and redemption, all issue and redeem quantities must be multiples of the natural unit. For a more thorough treatment, including an example, see section 5.2.1 of our White Paper .","title":"Units and Natural Units"},{"location":"furtherreference/#advanced-resources","text":"Whitepaper Contracts Github","title":"Advanced Resources"},{"location":"furtherreference/#wandx-blog-posts","text":"WandX\u2019s Basket Protocol WandX Decentralized Exchange and basket protocol release 1.0 Paving The Future With Smart Contracts WandX : The Multi-Blockchain DEX and Basket protocol","title":"WandX Blog Posts"},{"location":"gettingstarted/","text":"Getting Started Now that we got that out of the way, let\u2019s get started \ud83d\ude80 Concepts Installation Usage Blockchain Setup Web3 Summary","title":"Getting Started"},{"location":"gettingstarted/#getting-started","text":"Now that we got that out of the way, let\u2019s get started \ud83d\ude80","title":"Getting Started"},{"location":"gettingstarted/#concepts","text":"","title":"Concepts"},{"location":"gettingstarted/#installation","text":"","title":"Installation"},{"location":"gettingstarted/#usage","text":"","title":"Usage"},{"location":"gettingstarted/#blockchain-setup","text":"","title":"Blockchain Setup"},{"location":"gettingstarted/#web3","text":"","title":"Web3"},{"location":"gettingstarted/#summary","text":"","title":"Summary"},{"location":"infrasolution/","text":"Infura like Infra Your acces to blockchain network. Our easy to use API and developer tools provide secure, reliable, and scalable access to different Blockchains. We provide the infrastructure for your decentralized applications so you can focus on the features. Blockchain Based: We eliminate the need to install, configure, and maintain costly Blockchain infrastructure. Reliable and Scalable: Our middleware improves reliability and helps us scale quickly to meet your demand. Distributed Storage: Access dapps seamlessly without the hassle of managing the infrastructure. Our infra Solutions AION Infra WANCHAIN Infra","title":"Infra"},{"location":"infrasolution/#infura-like-infra","text":"Your acces to blockchain network. Our easy to use API and developer tools provide secure, reliable, and scalable access to different Blockchains. We provide the infrastructure for your decentralized applications so you can focus on the features. Blockchain Based: We eliminate the need to install, configure, and maintain costly Blockchain infrastructure. Reliable and Scalable: Our middleware improves reliability and helps us scale quickly to meet your demand. Distributed Storage: Access dapps seamlessly without the hassle of managing the infrastructure.","title":"Infura like Infra"},{"location":"infrasolution/#our-infra-solutions","text":"AION Infra WANCHAIN Infra","title":"Our infra Solutions"},{"location":"integrations/","text":"SDK API Integration Guest Login This API will help to register the metamask account in our platform so in future we can track their orders and further activity of the user. After guest login wandxApp generation on random userId for identification of the user. API URL : /RegisterUser Method : POST Headers : Ocp-Apim-Subscription-Key Parameters Name Type Description UserAccount Address User Account address UserEmail String Email address of the user Name String Name of the user Get Token After Guest login we are using this API give the JWT token for particular user that login using guest login API. The token we will after response of this API will use for further validation of user request and also token will expire in 3 days API URL : /Token Method : POST Headers : Ocp-Apim-Subscription-Key Parameters Name Type Description UserAccount Address User Account address UserEmail String Email address of the user Name String Name of the user Platform Token This API will get the all platform token that are regsitered in our wandx app with detail like id, name and address of the token that will use for the get buy order API. API URL : /PlatformToken Method : GET Headers : \"Ocp-Apim-Subscription-Key, Token : token(JWT)\" getBuyorder This API will get the all buyorder of the particular token with ownerid, selling token list and all address with status and many more this please check attachment for that. API URL : /order/sell/getall/+tokenId Method : GET Headers : \"Ocp-Apim-Subscription-Key, Token : token(JWT)\"","title":"SDK"},{"location":"integrations/#sdk","text":"","title":"SDK"},{"location":"integrations/#api-integration","text":"","title":"API Integration"},{"location":"integrations/#guest-login","text":"","title":"Guest Login"},{"location":"integrations/#get-token","text":"","title":"Get Token"},{"location":"integrations/#platform-token","text":"","title":"Platform Token"},{"location":"integrations/#getbuyorder","text":"","title":"getBuyorder"},{"location":"smartcontracts/","text":"Ethereum Smart Contracts - (Basket and DEX) One Way Dex DEx1WaySig Send the address along with token, fee value and verifier address. function DEx1WaySig( address _vault, address _feeCalculator, address _baseToken, address _etherToken, address _verifierAddr) Parameters Name Type Description Address_Vault String Value to change address _feeCalculator BigNumber Value to change address _baseToken BigNumber Value to change address _etherToken BigNumber Value to change address _verifierAddr Address Value to change killExchange Under Emergency cases to kill the exchange. function killExchange() Parameters Name Type Description updateVault To update the Wallet. function updateVault(address _vault) Parameters Name Type Description address _vault Address Vault Address updateExConfig Once verified Wallet and fee values are updated. function updateExConfig(address _wallet, address _verifierAddr, address _feeCalculator) Parameters Name Type Description address _wallet Address Wallet Address address _verifierAddr Address Address verification address _feeCalculator BigNumber Fee calculator isOrderSigned TO sign the Order using VRS Structure. function isOrderSigned(bytes32 _msgHash, uint8 v, bytes32 r, bytes32 s, address _signer) Parameters Name Type Description bytes32 _msgHash TxHash Transaction message hash uint8 v Boolean Signature module bytes32 r Boolean Signature module bytes32 s Boolean Signature module address _signer Address Signature address validExchangeFee Based on Sell and Buy token identifying the buy and sell value. function validExchangeFee(address _sellerFeeToken, address _buyerFeeToken, uint256 _sellerFeeValue, uint256 _buyrFeeValue) Parameters Name Type Description address _sellerFeeToken Address Seller Free tokens address _buyerFeeToken Address Buyer free tokens uint256 _sellerFeeValue String Seller fee value uint256 _buyrFeeValue String Buyer Fee value getFeeIndex Retreive the fee value. function getFeeIndex(address _token) Parameters Name Type Description address _token Address Token Address getTwoWayOrderHash Once the transaction is complete receieve the hash value which contains both side value. function getTwoWayOrderHash(address[] _sellerTokens, address[] _buyerTokens, uint256[] _sellerValues, uint256[] _buyerValues, address[5] _orderAddresses, uint256[5] _orderValues, bytes32 _orderID) Parameters Name Type Description address[] _sellerTokens Address Seller Tokens address[] _buyerTokens String Buyer Tokens uint256[] _sellerValues String Seller Value uint256[] _buyerValues String Buyer Value address[5] _orderAddresses Address Order Address uint256[5] _orderValues String Order Value bytes32 _orderID Boolean Order ID getOneWayOrderHashes Once the transaction is complete receieve the hash value which contains one side value function getOneWayOrderHashes(address[] _sellerTokens, address[] _buyerTokens, uint256[] _sellerValues, uint256[] _buyerValues, address[5] _orderAddresses, uint256[5] _orderValues, bytes32 _orderID) Parameters Name Type Description address[] _sellerTokens Address Seller Tokens address[] _buyerTokens Address Buyer Tokens uint256[] _sellerValues String Seller Value uint256[] _buyerValues String Buyer Value address[5] _orderAddresses Address Order Address uint256[5] _orderValues String Order Value bytes32 _orderID String Order ID getOrderHash Order hash can be retrieved here. function getOrderHash(address[] _tokens, uint256[] _counts, uint256 _pValue, uint256 _fValue, address _feeToken, address _maker, address _signer, bytes32 _orderID) Parameters Name Type Description address[] _tokens Address Token uint256[] _counts Address Token count uint256 _pValue String Signature module uint256 _fValue String Signature module address _feeToken String Fee token address _maker Address Maker Address address _signer Address Signature address bytes32 _orderID String Order ID trasnferTokens Can transfer tokens from one account to another. function trasnferTokens(address[] _sellerTokens, address[] _buyerTokens, uint256[] _sellerValues, uint256[] _buyerValues, address[5] _orderAddresses, uint256[5] _orderValues) Parameters Name Type Description address[] _sellerTokens Address Seller Tokens address[] _buyerTokens Address Buyer Tokens uint256[] _sellerValues String Seller Value uint256[] _buyerValues String Buyuer Value address[5] _orderAddresses Address Address of the order uint256[5] _orderValues String Value of the order basicSigValidations Validating the sign transactions. function basicSigValidations(address[5] _orderAddresses, uint8[2] _v, bytes32 _sr, bytes32 _ss, bytes32 _br, bytes32 _bs, bytes32 _sellerHash, bytes32 _buyerHash) Parameters Name Type Description address[5] _orderAddresses Address Order Address uint8[2] _v String Signature module bytes32 _sr String Signature module bytes32 _ss String Signature module bytes32 _br String Signature module bytes32 _bs String Signature module bytes32 _sellerHash TxHash Seller Trnsaction Hash bytes32 _buyerHash TxHash Buyer Transaction Hash oneWayFulfillPO One way portfolio verifications being fulfilled or not. function oneWayFulfillPO(address[] _sellerTokens, address[] _buyerTokens, uint256[] _sellerValues, uint256[] _buyerValues, address[5] _orderAddresses, uint256[5] _orderValues, uint8[2] _v, bytes32 _br, bytes32 _bs, bytes32 _sr, bytes32 _ss, bytes32 _orderID) Parameters Name Type Description address[] _sellerTokens Address Seller Tokens address[] _buyerTokens Address Buyer Tokens uint256[] _sellerValues String Seller Value uint256[] _buyerValues String Buyer Value address[5] _orderAddresses Address Order Address uint256[5] _orderValues String Order Values uint8[2] _v String Signature module bytes32 _br String Signature module bytes32 _bs String Signature module bytes32 _sr String Signature module bytes32 _ss String Signature module bytes32 _orderID String Order ID orderExists Verify if the order placed still exists or not. function orderExists(bytes32 _hash, bytes32 _orderID) Parameters Name Type Description bytes32 _hash TxHash Has Value bytes32 _orderID String Order ID validateAuthorization Validate a particular order is being authorized by the right individual or not. function validateAuthorization(address[] _sellerTokens, address[] _buyerTokens, uint256[] _sellerValues, uint256[] _buyerValues, address[5] _orderAddresses, uint256[5] _orderValues) Parameters Name Type Description address[] _sellerTokens Address Seller Tokens address[] _buyerTokens Address Buyer Tokens uint256[] _sellerValues String Seller Value uint256[] _buyerValues String Buyer Value address[5] _orderAddresses Address Order Address uint256[5] _orderValues String Order Value Two Way Dex DEx2WaySig Send the address along with token, fee value and verifier address and receive the has back again. function DEx2WaySig( address _vault, address _feeCalculator, address _baseToken, address _etherToken, address _verifierAddr) Parameters Name Type Description address _vault Address Valut Address address _feeCalculator String Fee calculator address _baseToken BigNumber Base token value address _etherToken Address Ether token address address _verifierAddr Address Verifier Address recoverSignerAddr To recover the address of the sender. function recoverSignerAddr(bytes32 _msgHash, uint8 v, bytes32 r, bytes32 s) Parameters Name Type Description bytes32 _msgHash TxHash Transaction Hash uint8 v String Signature module bytes32 r String Signature module bytes32 s String Signature module twoWayFulfillPO Fulfilling the portfolio two ways. function twoWayFulfillPO(address[] _sellerTokens, address[] _buyerTokens, uint256[] _sellerValues, uint256[] _buyerValues, address[5] _orderAddresses, uint256[3] _orderValues, uint8[2] _v, bytes32 _br, bytes32 _bs, bytes32 _sr, bytes32 _ss, bytes32 _hash, bytes32 _orderID) Parameters Name Type Description address[] _sellerTokens Address Seller tokens address[] _buyerTokens Address Buyer Tokens uint256[] _sellerValues String Seller value uint256[] _buyerValues String Buyer value address[5] _orderAddresses Address Order address uint256[5] _orderValues String Value of orders placed uint8[2] _v String Signature module bytes32 _br String Signature module bytes32 _bs String Signature module bytes32 _sr String Signature module bytes32 _ss String Signature module bytes32 _hash Hash Hash value bytes32 _orderID String Order ID Very Basic Portfolio VBP VBP Very basic portfolio sending all parameters, which include owner address, assets, volume of assets, ask value, expiry block, portfolio name. function VBP(address _owner, address[] _assets, uint256[] _volumes, uint256 _askValue, uint256 _expiryBlock, bytes32 _portfolioName) Parameters Name Type Description address _owner Address Owner address address[] _assets Address Asset address uint256[] _volumes String Trade volume uint256 _askValue String Ask value for the basket uint256 _expiryBlock String Block expiry time bytes32 _portfolioName String Portfoli Name updatePortfolio Update a portfolio that was already created. function updatePortfolio (uint256 _askValue, uint256 _expiresAfter, address[] _assets, uint256[] _volumes, bytes32 _portfolioName) Parameters Name Type Description uint256 _askValue String Ask value for the basket uint256 _expiresAfter String Block expiry time address[] _assets Address Asset address uint256[] _volumes String Volume of the asset bytes32 _portfolioName String Portfolio Name locateAsset TO identify where the assets have moved to. function locateAsset(address _keyAsset) Parameters Name Type Description address _keyAsset Address Key asset address updateAssets Update the assets that had already been set in the basket. function updateAssets(address[] _assets, uint256[] _volumes) Parameters Name Type Description address[] _assets Address Asset address uint256[] _volumes String Total volume depositTokens Deposit tokens into the basket. function depositTokens(address _token, uint _amount) Parameters Name Type Description address _token Address Token Address uint _amount String Total amount balanceOfToken Findn out the balance of token in the contract. function balanceOfToken(address _depositor, address _token) Parameters Name Type Description address _depositor Address Depositor address address _token Address Token address withdrawToken Withdraw tokens from basket. function withdrawToken(address _token, uint256 _amount) Parameters Name Type Description address _token Address Token address uint256 _amount String Total Amount liquidate Liquidate tokens from my basket. function liquidate() Parameters Name Type Description publish Publish my basket. function publish() Parameters Name Type Description cancelPortfolio Cancel my portfolio that had been created. function cancelPortfolio() Parameters Name Type Description buy Buy a particular basket that is available. function buy() Parameters Name Type Description moveAssets Move assets from one address to another. function moveAssets(address _from, address _to) Parameters Name Type Description address _from Address Senders address address _to Address Receivers address VBP Exchange VBPExchange Very basic portfolio exchange main function. function VBPExchange(address _storage, address _calc, address _proxy, address _token) Parameters Name Type Description address _storage Address Storage address address _calc Address Fee calculator address address _proxy Address Proxy address address _token Address Address of the token updateExchange Update the vbp exchange. function updateExchange(address _storage, address _calc, address _proxy, address _token) Parameters Name Type Description address _storage Address Token storage address address _calc String Address calculator address _proxy String Proxy Address address _token String Token Address getPortfolioHash Get a particular portfolio hash. function getPortfolioHash(address _maker, address[] _assets, uint256[] _volumes, uint256 _askValue, uint256 _expiryBlock, bytes32 _name) Parameters Name Type Description address _maker Address maker Address address[] _assets Address Asset Address uint256[] _volumes String Transactions Volume uint256 _askValue String Ask Value uint256 _expiryBlock String Block Expiry bytes32 _name String String Name getFee Get fee based on arket value for a particular basket. function getFee(uint256 _askValue, uint256 _feeIndex) Parameters Name Type Description uint256 _askValue String Ask Value uint256 _feeIndex String Fee Index createPortfolio Create a basket portfolio function createPortfolio(address _maker, address[] _assets, uint256[] _volumes, uint256 _askValue, uint256 _expiryBlock, bytes32 _name) Parameters Name Type Description address _maker Address Maker Address address[] _assets Address Asset Address uint256[] _volumes String Trade volume uint256 _askValue String Ask Value uint256 _expiryBlock String Block expiry bytes32 _name String Name Recurrent Portfolio RecurrentPortfolio RecurrentPortfolios Recurrent portfolio main function which is used to repeat a particualr portfolio. function RecurrentPortfolios(address _owner, address _wallet, address[] _assets, uint256[] _volumes, uint256 _askValue, uint256 _feeRateForEther, uint256 _expiryBlock, bytes32 _portfolioName) Parameters Name Type Description address _owner Address Owner address address _wallet Address Wallet address address[] _assets Address Asset address uint256[] _volumes String Volume of the basket uint256 _askValue String Ask value for the basket uint256 _feeRateForEther String Fee rate for ether uint256 _expiryBlock String Block expiry time bytes32 _portfolioName String Portfolio Name updatePortfolio Update a particular portfolio. function updatePortfolio (uint256 _askValue, uint256 _expiresAfter, address[] _assets, uint256[] _volumes, bytes32 _portfolioName) Parameters Name Type Description uint256 _askValue String Ask value of the basket uint256 _expiresAfter String Expiry time address[] _assets Address Asset address uint256[] _volumes String Volume of the basket bytes32 _portfolioName String Name of the portfolio locateAsset Locate assets on my dashboard. function locateAsset(address _keyAsset) Parameters Name Type Description address _keyAsset Address Key asset address updateAssets Update assets once transaction are complete. function updateAssets(address[] _assets, uint256[] _volumes) Parameters Name Type Description address[] _assets Address Asset address uint256[] _volumes String Volume of tokens depositTokens Deposit tokens into my account. function depositTokens(address _token, uint _amount) Parameters Name Type Description address _token Address Token address uint _amount String Amount balanceOfToken Get token banalnce in my account. function balanceOfToken(address _depositor, address _token) Parameters Name Type Description address _depositor Address Depositer Address address _token Address Token Address withdrawToken Withdraw tokens from my account. function withdrawToken(address _token, uint256 _amount) Parameters Name Type Description address _token Address Token Address uint256 _amount String Amount liquidate Liquidate tokens in my account. function liquidate() Parameters Name Type Description getExchangeFee Get my exchange fee. function getExchangeFee() Parameters Name Type Description publish Publish my portfolio. function publish() Parameters Name Type Description cancelPortfolio Cancel my portfolio. function cancelPortfolio() Parameters Name Type Description buy Buy portfolio or tokens on a particular exchange. function buy(address _exchange) Parameters Name Type Description address _exchange Exchange address moveAssets Move asstes from one address to another. function moveAssets(address _from, address _to) Parameters Name Type Description address _from Address From address address _to Address To Address RecurrentPortfolio Exchange RPExchange Recurrent portfolio exchange main function. function RPExchange(address _storage, address _calc, address _proxy, address _token, address _wallet) Parameters Name Type Description address _storage Address Storage address address _calc String Address fee calculator address _proxy String Proxy Address address _token Address Token address address _wallet Address Wallet address updateExchange Update my exchange once transaction are complete. function updateExchange(address _storage, address _calc, address _proxy, address _token, address _wallet) Parameters Name Type Description address _storage Address Address storage address _calc String Address fee calculator address _proxy String Address proxy address _token Address Token address address _wallet Address Wallet address getPortfolioHash Get my portfoilio hash once the transaction is complete. function getPortfolioHash(address _maker, address[] _assets, uint256[] _volumes, uint256 _askValue, uint256 _expiryBlock, bytes32 _name) Parameters Name Type Description address _maker Address Maker address address[] _assets Address Asstes location address uint256[] _volumes String Volume of the basket uint256 _askValue String Ask value of the basket uint256 _expiryBlock String Block expiry time bytes32 _name String Name getFee Get fee of my tokens or portfoio on the exchange. function getFee(uint256 _askValue, uint256 _feeIndex) Parameters Name Type Description uint256 _askValue String Ask value of the basket uint256 _feeIndex String Trnsaction fee index value createPortfolio Create a portfolio on RP Exchange. function createPortfolio(address _maker, address[] _assets, uint256[] _volumes, uint256 _askValue, uint256 _expiryBlock, bytes32 _name) Parameters Name Type Description Order Book Authentication addAuthorizedAddress Add authorized addresses to echange. function addAuthorizedAddress(address _newAddress) Parameters Name Type Description address _newAddress Address New address removeAuthorizedAddress Remove already aurthorized addresses. function removeAuthorizedAddress(address _newAddress) Parameters Name Type Description address _newAddress Address New address changeApprover Change the approver who was already responsible for approving. function changeApprover(address _newApprover) Parameters Name Type Description address _newApprover Address New approver address changeOwner Change the owner of the portfolio or tokens or contract. function changeOwner(address _newOwner) Parameters Name Type Description address _newOwner Address New Owner address ecrecovery Recovering the signature hasg of every transaction. function ecrecovery(bytes32 _msgHash, uint8 v, bytes32 r, bytes32 s) Parameters Name Type Description bytes32 _msgHas Hash Message Hash uint8 v String Signature module bytes32 r String Signature module bytes32 s String Signature module Authentication Multi-Owner addOwnership Providing ownership to a particular newly added owner. function addOwnership(address _newOwner) Parameters Name Type Description address _newOwner Address New owner address removeOwnership Removing ownership. function removeOwnership(address _owner) Parameters Name Type Description address _owner Address Owner address changeApprover Cchange approver. function changeApprover(address _newApprover) Parameters Name Type Description address _newApprover Address New approver address changeOwner Change the owner of the contract. function changeOwner(address _newOwner) Parameters Name Type Description address _newOwner Address New Owner address OrderBook changeTraderConfig Trade configuration changes for orderbook can be made here. function changeTraderConfig(bool _tradeActive, address _dataStore, bool _isLocked) Parameters Name Type Description bool _tradeActive Boolean Trade active status address _dataStore Address Data store address bool _isLocked Boolean Locked status updateFeeCalcConfig function updateFeeCalcConfig(address _baseToken, address _ether, uint256 _baseTokenFee, uint256 _etherFee, uint256 _normalTokenFee) Parameters Name Type Description address _baseToken Address Base token address address _ether Address Ether address uint256 _baseTokenFee String Base token fee uint256 _etherFee String Ether fee uint256 _normalTokenFee Normal token fee calcTradeFee function calcTradeFee(uint256 _value, address _feeToken) Parameters Name Type Description uint256 _value String Value of tokens address _feeToken Address Token fee orderHash function orderHash(address _sellToken, address _buyToken, uint256 _totalOrderVolume, uint256 _priceRate, uint256 _numBlocksExpires, address _orderCreator, uint256 _orderType, bytes32 _orderID, address _feeToken) Parameters Name Type Description address _sellToken Address Sell token address address _buyToken Address Buy token address uint256 _totalOrderVolume String Total order volume uint256 _priceRate String Price Rate uint256 _numBlocksExpires String Block expiry time address _orderCreator Address Order creator address uint256 _orderType String Order type bytes32 _orderID String Order ID address _feeToken String Token Fee validateAndGetOrderHash function validateAndGetOrderHash (address[6] _tokensAndAddresses, uint256[6] _volumes, uint256 _numBlocksExpires, uint256 _orderType, bytes32 _orderID) Parameters Name Type Description address[6] _tokensAndAddresses Address Token address and count uint256[6] _volumes String Volume of tokens uint256 _numBlocksExpires String Block expiry time uint256 _orderType String Type of order bytes32 _orderID String Order ID verifySignature function verifySignature(address _signer, bytes32 _orderHash, uint8 v, bytes32 r, bytes32 s) Parameters Name Type Description address _signer Address Address of the individual who signed the transaction bytes32 _orderHash Tx Hash Order hash uint8 v String Signature Module bytes32 r String Signature Module bytes32 s String Signature Module basicSigValidations function basicSigValidations(address[6] _orderAddresses, uint256 _orderType, bytes32 _orderHash, uint8 v, bytes32 r, bytes32 s) Parameters Name Type Description address[6] _orderAddresses Address Orderer address uint256 _orderType String Order type bytes32 _orderHash TxHash Order hash uint8 v String Signature Module bytes32 r String Signature Module bytes32 s String Signature Module orderAvailability function orderAvailability(bytes32 _orderHash, address _orderCreator, uint256 _totalOrderVolume) Parameters Name Type Description bytes32 _orderHash TxHash Order Hash address _orderCreator Address Order Creator uint256 _totalOrderVolume String Total order volume isOrderClosedOrFulfilled function isOrderClosedOrFulfilled(bytes32 _orderHash, address _orderCreator, uint256 _totalOrderVolume) Parameters Name Type Description bytes32 _orderHash TxHash Orer Hash address _orderCreator Address Order Creator uint256 _totalOrderVolume String Total order volume oredrAlreadyExists function oredrAlreadyExists(bytes32 _orderHash, address _orderCreator) Parameters Name Type Description bytes32 _orderHash TxHash Order Hash address _orderCreator Address Order creator createOrder function createOrder(address _sellToken, address _buyToken, uint256 _totalOrderVolume, uint256 _priceRate, uint256 _numBlocksExpires, address _orderCreator, uint256 _orderType, bytes32 _orderID, address _feeToken) Parameters Name Type Description address _sellToken Address Sell token address _buyToken Address Buy token uint256 _totalOrderVolume String Total order volume uint256 _priceRate String Price rating uint256 _numBlocksExpires String Block expiry time address _orderCreator Address Order creator uint256 _orderType String Order type bytes32 _orderID String Order ID address _feeToken Address Token fee cancelOrder function cancelOrder(bytes32 _orderHash, address _orderCreator, uint256 _totalOrderVolume, address _feeToken, uint256 _orderValue) Name Type Description bytes32 _orderHash TxHash Order hash address _orderCreator Address Order creator uint256 _totalOrderVolume String Total volume of the order address _feeToken Address Token fee uint256 _orderValue String Value of the order fillOrder function fillOrder(address[6] _tokensAndAddresses, uint256[6] _volumes, uint256 _numBlocksExpires, uint256 _orderType, uint8 v, bytes32 r, bytes32 s, bytes32 _orderID) Parameters Name Type Description address[6] _tokensAndAddresses Address Value of tokens and also the address uint256[6] _volumes String Volume of the trade uint256 _numBlocksExpires String Block expiry time uint256 _orderType String Order type uint8 v String Signature module bytes32 r String Signature module bytes32 s String Signature module bytes32 _orderID String Order ID walletTransfers function walletTransfers(address[6] _tokensAndAddresses, uint256[6] _volumes) Parameters Name Type Description address[6] _tokensAndAddresses Address Tokens and address to send uint256[6] _volumes String Volume of the trade orderMatchHash function orderMatchHash(address[6] _tokensAndAddresses, uint256[5] _volumes, bytes32 _orderMatchID, uint256 _expiryBlockNumber) Parameters Name Type Description address[6] _tokensAndAddresses Address uint256[5] _volumes String Total volume bytes32 _orderMatchID String Order match ID uint256 _expiryBlockNumber String Block expiry number fillOrderMatch function fillOrderMatch(address[6] _tokensAndAddresses, uint256[5] _volumes, uint256 _expiryBlockNumber, bytes32 _orderMatchID,uint8 v, bytes32 r, bytes32 s) Parameters Name Type Description address[6] _tokensAndAddresses Address Tokens and address uint256[5] _volumes String Total volume uint256 _expiryBlockNumber String Block expiry number bytes32 _orderMatchID String Order match ID uint8 v String Signature module bytes32 r String Signature module bytes32 s String Signature module balanceOf function balanceOf(address _depositor) Parameters Name Type Description address _depositor Address Depositor Address balanceOfToken function balanceOfToken(address _depositor, address _token) Parameters Name Type Description address _depositor Address Depositor Address address _token Address Token address deposit function deposit(address _depositor) Parameters Name Type Description address _depositor Address Depositor address depositTokens function depositTokens(address _depositor, address _token, uint256 _amount) Parameters Name Type Description address _depositor Address Depositor address address _token Address Token address uint256 _amount String Amount withdrawTo function withdrawTo(address _to, uint256 _amount) Parameters Name Type Description address _to Address Receivers address uint256 _amount String Total amount withdrawTokenTo function withdrawTokenTo(address _to, address _token, uint256 _amount) Parameters Name Type Description address _to Address Receivers address address _token Address Token address uint256 _amount String Total amount moveToSafetyWallet function moveToSafetyWallet() Parameters Name Type Description walletTransfer function walletTransfer(address _from, address _to, address _token, uint256 _amount) Parameters Name Type Description address _from Address Senders address address _to Address Receivers address address _token Address Token address uint256 _amount String Total amount OrderBook function OrderBook(address _newApprover, address _newWallet, address _dataStore) Parameters Name Type Description address _newApprover Address Approvers address address _newWallet Address New Wallet address address _dataStore Address Data store address Order Vault addOwner Add a particular owner to a vault. function addOwner(address newOwner) Parameters Name Type Description address newOwner Address New Owner address removeOwner Remove ownership of a particualar address. function removeOwner(address _owner) Parameters Name Type Description address _owner Address Owner address OrderVault Order a new Vault. function OrderVault() Parameters Name Type Description openVault Opening up a new vault. function openVault(uint256 _startTime, uint256 _closureTime) Parameters Name Type Description uint256 _startTime String Start time of the vault uint256 _closureTime String Expiry time for the vault extendVault Extend the vault. function extendVault(uint256 _closureTime) Parameters Name Type Description uint256 _closureTime String Expiry time for the basket closeVault Closing the vault. function closeVault() Parameters Name Type Description storeInVault Store the values on the valut. function storeInVault(bytes32 _orderHash, bytes32 _orderID) Parameters Name Type Description bytes32 _orderHash TxHash Transaction Hash bytes32 _orderID String Order ID sealVault Set the value for a particular asset on the exchange. function sealVault() Parameters Name Type Description getNumberOfOders Get the number of orders on the exchange that are being placed. function getNumberOfOders() Parameters Name Type Description orderLocated Locate the order. Which address owns the new contract. function orderLocated(bytes32 _hash, bytes32 _orderID) Parameters Name Type Description bytes32 _hash String Transaction Hash bytes32 _orderID String Order ID Ownable Ownable Identify who own the contract. function Ownable() Parameters Name Type Description transferOwnership Transfer ownership from one address to another. function transferOwnership(address newOwner) Parameters Name Type Description address newOwner Address Address of the owner","title":"Ethereum"},{"location":"smartcontracts/#ethereum-smart-contracts-basket-and-dex","text":"","title":"Ethereum Smart Contracts - (Basket and DEX)"},{"location":"smartcontracts/#one-way-dex","text":"","title":"One Way Dex"},{"location":"smartcontracts/#two-way-dex","text":"","title":"Two Way Dex"},{"location":"smartcontracts/#very-basic-portfolio","text":"","title":"Very Basic Portfolio"},{"location":"smartcontracts/#vbp","text":"","title":"VBP"},{"location":"smartcontracts/#vbp-exchange","text":"","title":"VBP Exchange"},{"location":"smartcontracts/#recurrent-portfolio","text":"","title":"Recurrent Portfolio"},{"location":"smartcontracts/#recurrentportfolio","text":"","title":"RecurrentPortfolio"},{"location":"smartcontracts/#recurrentportfolio-exchange","text":"","title":"RecurrentPortfolio Exchange"},{"location":"smartcontracts/#order-book","text":"","title":"Order Book"},{"location":"smartcontracts/#authentication","text":"","title":"Authentication"},{"location":"smartcontracts/#authentication-multi-owner","text":"","title":"Authentication Multi-Owner"},{"location":"smartcontracts/#orderbook","text":"","title":"OrderBook"},{"location":"smartcontracts/#order-vault","text":"","title":"Order Vault"},{"location":"smartcontracts/#ownable","text":"","title":"Ownable"},{"location":"wansmartcontracts/","text":"Wanchain Smart Contracts - (Basket and DEX) One Way Dex DEx1WaySig Send the address along with token, fee value and verifier address. function DEx1WaySig( address _vault, address _feeCalculator, address _baseToken, address _wanToken, address _verifierAddr) Parameters Name Type Description Address_Vault String Value to change address _feeCalculator BigNumber Value to change address _baseToken BigNumber Value to change address _wanToken BigNumber Value to change address _verifierAddr Address Value to change killExchange Under Emergency cases to kill the exchange. function killExchange() Parameters Name Type Description updateVault To update the Wallet. function updateVault(address _vault) Parameters Name Type Description address _vault Address Vault Address updateExConfig Once verified Wallet and fee values are updated. function updateExConfig(address _wallet, address _verifierAddr, address _feeCalculator) Parameters Name Type Description address _wallet Address Wallet Address address _verifierAddr Address Address verification address _feeCalculator BigNumber Fee calculator isOrderSigned TO sign the Order using VRS Structure. function isOrderSigned(bytes32 _msgHash, uint8 v, bytes32 r, bytes32 s, address _signer) Parameters Name Type Description bytes32 _msgHash TxHash Transaction message hash uint8 v Boolean Signature module bytes32 r Boolean Signature module bytes32 s Boolean Signature module address _signer Address Signature address validExchangeFee Based on Sell and Buy token identifying the buy and sell value. function validExchangeFee(address _sellerFeeToken, address _buyerFeeToken, uint256 _sellerFeeValue, uint256 _buyrFeeValue) Parameters Name Type Description address _sellerFeeToken Address Seller Free tokens address _buyerFeeToken Address Buyer free tokens uint256 _sellerFeeValue String Seller fee value uint256 _buyrFeeValue String Buyer Fee value getFeeIndex Retreive the fee value. function getFeeIndex(address _token) Parameters Name Type Description address _token Address Token Address getTwoWayOrderHash Once the transaction is complete receieve the hash value which contains both side value. function getTwoWayOrderHash(address[] _sellerTokens, address[] _buyerTokens, uint256[] _sellerValues, uint256[] _buyerValues, address[5] _orderAddresses, uint256[5] _orderValues, bytes32 _orderID) Parameters Name Type Description address[] _sellerTokens Address Seller Tokens address[] _buyerTokens String Buyer Tokens uint256[] _sellerValues String Seller Value uint256[] _buyerValues String Buyer Value address[5] _orderAddresses Address Order Address uint256[5] _orderValues String Order Value bytes32 _orderID Boolean Order ID getOneWayOrderHashes Once the transaction is complete receieve the hash value which contains one side value function getOneWayOrderHashes(address[] _sellerTokens, address[] _buyerTokens, uint256[] _sellerValues, uint256[] _buyerValues, address[5] _orderAddresses, uint256[5] _orderValues, bytes32 _orderID) Parameters Name Type Description address[] _sellerTokens Address Seller Tokens address[] _buyerTokens Address Buyer Tokens uint256[] _sellerValues String Seller Value uint256[] _buyerValues String Buyer Value address[5] _orderAddresses Address Order Address uint256[5] _orderValues String Order Value bytes32 _orderID String Order ID getOrderHash Order hash can be retrieved here. function getOrderHash(address[] _tokens, uint256[] _counts, uint256 _pValue, uint256 _fValue, address _feeToken, address _maker, address _signer, bytes32 _orderID) Parameters Name Type Description address[] _tokens Address Token uint256[] _counts Address Token count uint256 _pValue String Signature module uint256 _fValue String Signature module address _feeToken String Fee token address _maker Address Maker Address address _signer Address Signature address bytes32 _orderID String Order ID trasnferTokens Can transfer tokens from one account to another. function trasnferTokens(address[] _sellerTokens, address[] _buyerTokens, uint256[] _sellerValues, uint256[] _buyerValues, address[5] _orderAddresses, uint256[5] _orderValues) Parameters Name Type Description address[] _sellerTokens Address Seller Tokens address[] _buyerTokens Address Buyer Tokens uint256[] _sellerValues String Seller Value uint256[] _buyerValues String Buyuer Value address[5] _orderAddresses Address Address of the order uint256[5] _orderValues String Value of the order basicSigValidations Validating the sign transactions. function basicSigValidations(address[5] _orderAddresses, uint8[2] _v, bytes32 _sr, bytes32 _ss, bytes32 _br, bytes32 _bs, bytes32 _sellerHash, bytes32 _buyerHash) Parameters Name Type Description address[5] _orderAddresses Address Order Address uint8[2] _v String Signature module bytes32 _sr String Signature module bytes32 _ss String Signature module bytes32 _br String Signature module bytes32 _bs String Signature module bytes32 _sellerHash TxHash Seller Trnsaction Hash bytes32 _buyerHash TxHash Buyer Transaction Hash oneWayFulfillPO One way portfolio verifications being fulfilled or not. function oneWayFulfillPO(address[] _sellerTokens, address[] _buyerTokens, uint256[] _sellerValues, uint256[] _buyerValues, address[5] _orderAddresses, uint256[5] _orderValues, uint8[2] _v, bytes32 _br, bytes32 _bs, bytes32 _sr, bytes32 _ss, bytes32 _orderID) Parameters Name Type Description address[] _sellerTokens Address Seller Tokens address[] _buyerTokens Address Buyer Tokens uint256[] _sellerValues String Seller Value uint256[] _buyerValues String Buyer Value address[5] _orderAddresses Address Order Address uint256[5] _orderValues String Order Values uint8[2] _v String Signature module bytes32 _br String Signature module bytes32 _bs String Signature module bytes32 _sr String Signature module bytes32 _ss String Signature module bytes32 _orderID String Order ID orderExists Verify if the order placed still exists or not. function orderExists(bytes32 _hash, bytes32 _orderID) Parameters Name Type Description bytes32 _hash TxHash Has Value bytes32 _orderID String Order ID validateAuthorization Validate a particular order is being authorized by the right individual or not. function validateAuthorization(address[] _sellerTokens, address[] _buyerTokens, uint256[] _sellerValues, uint256[] _buyerValues, address[5] _orderAddresses, uint256[5] _orderValues) Parameters Name Type Description address[] _sellerTokens Address Seller Tokens address[] _buyerTokens Address Buyer Tokens uint256[] _sellerValues String Seller Value uint256[] _buyerValues String Buyer Value address[5] _orderAddresses Address Order Address uint256[5] _orderValues String Order Value Two Way Dex DEx2WaySig Send the address along with token, fee value and verifier address and receive the has back again. function DEx2WaySig( address _vault, address _feeCalculator, address _baseToken, address _wanToken, address _verifierAddr) Parameters Name Type Description address _vault Address Valut Address address _feeCalculator String Fee calculator address _baseToken BigNumber Base token value address _wanToken Address wan token address address _verifierAddr Address Verifier Address recoverSignerAddr To recover the address of the sender. function recoverSignerAddr(bytes32 _msgHash, uint8 v, bytes32 r, bytes32 s) Parameters Name Type Description bytes32 _msgHash TxHash Transaction Hash uint8 v String Signature module bytes32 r String Signature module bytes32 s String Signature module twoWayFulfillPO Fulfilling the portfolio two ways. function twoWayFulfillPO(address[] _sellerTokens, address[] _buyerTokens, uint256[] _sellerValues, uint256[] _buyerValues, address[5] _orderAddresses, uint256[3] _orderValues, uint8[2] _v, bytes32 _br, bytes32 _bs, bytes32 _sr, bytes32 _ss, bytes32 _hash, bytes32 _orderID) Parameters Name Type Description address[] _sellerTokens Address Seller tokens address[] _buyerTokens Address Buyer Tokens uint256[] _sellerValues String Seller value uint256[] _buyerValues String Buyer value address[5] _orderAddresses Address Order address uint256[5] _orderValues String Value of orders placed uint8[2] _v String Signature module bytes32 _br String Signature module bytes32 _bs String Signature module bytes32 _sr String Signature module bytes32 _ss String Signature module bytes32 _hash Hash Hash value bytes32 _orderID String Order ID Very Basic Portfolio VBP VBP Very basic portfolio sending all parameters, which include owner address, assets, volume of assets, ask value, expiry block, portfolio name. function VBP(address _owner, address[] _assets, uint256[] _volumes, uint256 _askValue, uint256 _expiryBlock, bytes32 _portfolioName) Parameters Name Type Description address _owner Address Owner address address[] _assets Address Asset address uint256[] _volumes String Trade volume uint256 _askValue String Ask value for the basket uint256 _expiryBlock String Block expiry time bytes32 _portfolioName String Portfoli Name updatePortfolio Update a portfolio that was already created. function updatePortfolio (uint256 _askValue, uint256 _expiresAfter, address[] _assets, uint256[] _volumes, bytes32 _portfolioName) Parameters Name Type Description uint256 _askValue String Ask value for the basket uint256 _expiresAfter String Block expiry time address[] _assets Address Asset address uint256[] _volumes String Volume of the asset bytes32 _portfolioName String Portfolio Name locateAsset TO identify where the assets have moved to. function locateAsset(address _keyAsset) Parameters Name Type Description address _keyAsset Address Key asset address updateAssets Update the assets that had already been set in the basket. function updateAssets(address[] _assets, uint256[] _volumes) Parameters Name Type Description address[] _assets Address Asset address uint256[] _volumes String Total volume depositTokens Deposit tokens into the basket. function depositTokens(address _token, uint _amount) Parameters Name Type Description address _token Address Token Address uint _amount String Total amount balanceOfToken Findn out the balance of token in the contract. function balanceOfToken(address _depositor, address _token) Parameters Name Type Description address _depositor Address Depositor address address _token Address Token address withdrawToken Withdraw tokens from basket. function withdrawToken(address _token, uint256 _amount) Parameters Name Type Description address _token Address Token address uint256 _amount String Total Amount liquidate Liquidate tokens from my basket. function liquidate() Parameters Name Type Description publish Publish my basket. function publish() Parameters Name Type Description cancelPortfolio Cancel my portfolio that had been created. function cancelPortfolio() Parameters Name Type Description buy Buy a particular basket that is available. function buy() Parameters Name Type Description moveAssets Move assets from one address to another. function moveAssets(address _from, address _to) Parameters Name Type Description address _from Address Senders address address _to Address Receivers address VBP Exchange VBPExchange Very basic portfolio exchange main function. function VBPExchange(address _storage, address _calc, address _proxy, address _token) Parameters Name Type Description address _storage Address Storage address address _calc Address Fee calculator address address _proxy Address Proxy address address _token Address Address of the token updateExchange Update the vbp exchange. function updateExchange(address _storage, address _calc, address _proxy, address _token) Parameters Name Type Description address _storage Address Token storage address address _calc String Address calculator address _proxy String Proxy Address address _token String Token Address getPortfolioHash Get a particular portfolio hash. function getPortfolioHash(address _maker, address[] _assets, uint256[] _volumes, uint256 _askValue, uint256 _expiryBlock, bytes32 _name) Parameters Name Type Description address _maker Address maker Address address[] _assets Address Asset Address uint256[] _volumes String Transactions Volume uint256 _askValue String Ask Value uint256 _expiryBlock String Block Expiry bytes32 _name String String Name getFee Get fee based on arket value for a particular basket. function getFee(uint256 _askValue, uint256 _feeIndex) Parameters Name Type Description uint256 _askValue String Ask Value uint256 _feeIndex String Fee Index createPortfolio Create a basket portfolio function createPortfolio(address _maker, address[] _assets, uint256[] _volumes, uint256 _askValue, uint256 _expiryBlock, bytes32 _name) Parameters Name Type Description address _maker Address Maker Address address[] _assets Address Asset Address uint256[] _volumes String Trade volume uint256 _askValue String Ask Value uint256 _expiryBlock String Block expiry bytes32 _name String Name Recurrent Portfolio RecurrentPortfolio RecurrentPortfolios Recurrent portfolio main function which is used to repeat a particualr portfolio. function RecurrentPortfolios(address _owner, address _wallet, address[] _assets, uint256[] _volumes, uint256 _askValue, uint256 _feeRateForwan, uint256 _expiryBlock, bytes32 _portfolioName) Parameters Name Type Description address _owner Address Owner address address _wallet Address Wallet address address[] _assets Address Asset address uint256[] _volumes String Volume of the basket uint256 _askValue String Ask value for the basket uint256 _feeRateForwan String Fee rate for wan uint256 _expiryBlock String Block expiry time bytes32 _portfolioName String Portfolio Name updatePortfolio Update a particular portfolio. function updatePortfolio (uint256 _askValue, uint256 _expiresAfter, address[] _assets, uint256[] _volumes, bytes32 _portfolioName) Parameters Name Type Description uint256 _askValue String Ask value of the basket uint256 _expiresAfter String Expiry time address[] _assets Address Asset address uint256[] _volumes String Volume of the basket bytes32 _portfolioName String Name of the portfolio locateAsset Locate assets on my dashboard. function locateAsset(address _keyAsset) Parameters Name Type Description address _keyAsset Address Key asset address updateAssets Update assets once transaction are complete. function updateAssets(address[] _assets, uint256[] _volumes) Parameters Name Type Description address[] _assets Address Asset address uint256[] _volumes String Volume of tokens depositTokens Deposit tokens into my account. function depositTokens(address _token, uint _amount) Parameters Name Type Description address _token Address Token address uint _amount String Amount balanceOfToken Get token banalnce in my account. function balanceOfToken(address _depositor, address _token) Parameters Name Type Description address _depositor Address Depositer Address address _token Address Token Address withdrawToken Withdraw tokens from my account. function withdrawToken(address _token, uint256 _amount) Parameters Name Type Description address _token Address Token Address uint256 _amount String Amount liquidate Liquidate tokens in my account. function liquidate() Parameters Name Type Description getExchangeFee Get my exchange fee. function getExchangeFee() Parameters Name Type Description publish Publish my portfolio. function publish() Parameters Name Type Description cancelPortfolio Cancel my portfolio. function cancelPortfolio() Parameters Name Type Description buy Buy portfolio or tokens on a particular exchange. function buy(address _exchange) Parameters Name Type Description address _exchange Exchange address moveAssets Move asstes from one address to another. function moveAssets(address _from, address _to) Parameters Name Type Description address _from Address From address address _to Address To Address RecurrentPortfolio Exchange RPExchange Recurrent portfolio exchange main function. function RPExchange(address _storage, address _calc, address _proxy, address _token, address _wallet) Parameters Name Type Description address _storage Address Storage address address _calc String Address fee calculator address _proxy String Proxy Address address _token Address Token address address _wallet Address Wallet address updateExchange Update my exchange once transaction are complete. function updateExchange(address _storage, address _calc, address _proxy, address _token, address _wallet) Parameters Name Type Description address _storage Address Address storage address _calc String Address fee calculator address _proxy String Address proxy address _token Address Token address address _wallet Address Wallet address getPortfolioHash Get my portfoilio hash once the transaction is complete. function getPortfolioHash(address _maker, address[] _assets, uint256[] _volumes, uint256 _askValue, uint256 _expiryBlock, bytes32 _name) Parameters Name Type Description address _maker Address Maker address address[] _assets Address Asstes location address uint256[] _volumes String Volume of the basket uint256 _askValue String Ask value of the basket uint256 _expiryBlock String Block expiry time bytes32 _name String Name getFee Get fee of my tokens or portfoio on the exchange. function getFee(uint256 _askValue, uint256 _feeIndex) Parameters Name Type Description uint256 _askValue String Ask value of the basket uint256 _feeIndex String Trnsaction fee index value createPortfolio Create a portfolio on RP Exchange. function createPortfolio(address _maker, address[] _assets, uint256[] _volumes, uint256 _askValue, uint256 _expiryBlock, bytes32 _name) Parameters Name Type Description Order Book Authentication addAuthorizedAddress Add authorized addresses to echange. function addAuthorizedAddress(address _newAddress) Parameters Name Type Description address _newAddress Address New address removeAuthorizedAddress Remove already aurthorized addresses. function removeAuthorizedAddress(address _newAddress) Parameters Name Type Description address _newAddress Address New address changeApprover Change the approver who was already responsible for approving. function changeApprover(address _newApprover) Parameters Name Type Description address _newApprover Address New approver address changeOwner Change the owner of the portfolio or tokens or contract. function changeOwner(address _newOwner) Parameters Name Type Description address _newOwner Address New Owner address ecrecovery Recovering the signature hasg of every transaction. function ecrecovery(bytes32 _msgHash, uint8 v, bytes32 r, bytes32 s) Parameters Name Type Description bytes32 _msgHas Hash Message Hash uint8 v String Signature module bytes32 r String Signature module bytes32 s String Signature module Authentication Multi-Owner addOwnership Providing ownership to a particular newly added owner. function addOwnership(address _newOwner) Parameters Name Type Description address _newOwner Address New owner address removeOwnership Removing ownership. function removeOwnership(address _owner) Parameters Name Type Description address _owner Address Owner address changeApprover Cchange approver. function changeApprover(address _newApprover) Parameters Name Type Description address _newApprover Address New approver address changeOwner Change the owner of the contract. function changeOwner(address _newOwner) Parameters Name Type Description address _newOwner Address New Owner address OrderBook changeTraderConfig Trade configuration changes for orderbook can be made here. function changeTraderConfig(bool _tradeActive, address _dataStore, bool _isLocked) Parameters Name Type Description bool _tradeActive Boolean Trade active status address _dataStore Address Data store address bool _isLocked Boolean Locked status updateFeeCalcConfig function updateFeeCalcConfig(address _baseToken, address _wan, uint256 _baseTokenFee, uint256 _wanFee, uint256 _normalTokenFee) Parameters Name Type Description address _baseToken Address Base token address address _wan Address wan address uint256 _baseTokenFee String Base token fee uint256 _wanFee String wan fee uint256 _normalTokenFee Normal token fee calcTradeFee function calcTradeFee(uint256 _value, address _feeToken) Parameters Name Type Description uint256 _value String Value of tokens address _feeToken Address Token fee orderHash function orderHash(address _sellToken, address _buyToken, uint256 _totalOrderVolume, uint256 _priceRate, uint256 _numBlocksExpires, address _orderCreator, uint256 _orderType, bytes32 _orderID, address _feeToken) Parameters Name Type Description address _sellToken Address Sell token address address _buyToken Address Buy token address uint256 _totalOrderVolume String Total order volume uint256 _priceRate String Price Rate uint256 _numBlocksExpires String Block expiry time address _orderCreator Address Order creator address uint256 _orderType String Order type bytes32 _orderID String Order ID address _feeToken String Token Fee validateAndGetOrderHash function validateAndGetOrderHash (address[6] _tokensAndAddresses, uint256[6] _volumes, uint256 _numBlocksExpires, uint256 _orderType, bytes32 _orderID) Parameters Name Type Description address[6] _tokensAndAddresses Address Token address and count uint256[6] _volumes String Volume of tokens uint256 _numBlocksExpires String Block expiry time uint256 _orderType String Type of order bytes32 _orderID String Order ID verifySignature function verifySignature(address _signer, bytes32 _orderHash, uint8 v, bytes32 r, bytes32 s) Parameters Name Type Description address _signer Address Address of the individual who signed the transaction bytes32 _orderHash Tx Hash Order hash uint8 v String Signature Module bytes32 r String Signature Module bytes32 s String Signature Module basicSigValidations function basicSigValidations(address[6] _orderAddresses, uint256 _orderType, bytes32 _orderHash, uint8 v, bytes32 r, bytes32 s) Parameters Name Type Description address[6] _orderAddresses Address Orderer address uint256 _orderType String Order type bytes32 _orderHash TxHash Order hash uint8 v String Signature Module bytes32 r String Signature Module bytes32 s String Signature Module orderAvailability function orderAvailability(bytes32 _orderHash, address _orderCreator, uint256 _totalOrderVolume) Parameters Name Type Description bytes32 _orderHash TxHash Order Hash address _orderCreator Address Order Creator uint256 _totalOrderVolume String Total order volume isOrderClosedOrFulfilled function isOrderClosedOrFulfilled(bytes32 _orderHash, address _orderCreator, uint256 _totalOrderVolume) Parameters Name Type Description bytes32 _orderHash TxHash Orer Hash address _orderCreator Address Order Creator uint256 _totalOrderVolume String Total order volume oredrAlreadyExists function oredrAlreadyExists(bytes32 _orderHash, address _orderCreator) Parameters Name Type Description bytes32 _orderHash TxHash Order Hash address _orderCreator Address Order creator createOrder function createOrder(address _sellToken, address _buyToken, uint256 _totalOrderVolume, uint256 _priceRate, uint256 _numBlocksExpires, address _orderCreator, uint256 _orderType, bytes32 _orderID, address _feeToken) Parameters Name Type Description address _sellToken Address Sell token address _buyToken Address Buy token uint256 _totalOrderVolume String Total order volume uint256 _priceRate String Price rating uint256 _numBlocksExpires String Block expiry time address _orderCreator Address Order creator uint256 _orderType String Order type bytes32 _orderID String Order ID address _feeToken Address Token fee cancelOrder function cancelOrder(bytes32 _orderHash, address _orderCreator, uint256 _totalOrderVolume, address _feeToken, uint256 _orderValue) Name Type Description bytes32 _orderHash TxHash Order hash address _orderCreator Address Order creator uint256 _totalOrderVolume String Total volume of the order address _feeToken Address Token fee uint256 _orderValue String Value of the order fillOrder function fillOrder(address[6] _tokensAndAddresses, uint256[6] _volumes, uint256 _numBlocksExpires, uint256 _orderType, uint8 v, bytes32 r, bytes32 s, bytes32 _orderID) Parameters Name Type Description address[6] _tokensAndAddresses Address Value of tokens and also the address uint256[6] _volumes String Volume of the trade uint256 _numBlocksExpires String Block expiry time uint256 _orderType String Order type uint8 v String Signature module bytes32 r String Signature module bytes32 s String Signature module bytes32 _orderID String Order ID walletTransfers function walletTransfers(address[6] _tokensAndAddresses, uint256[6] _volumes) Parameters Name Type Description address[6] _tokensAndAddresses Address Tokens and address to send uint256[6] _volumes String Volume of the trade orderMatchHash function orderMatchHash(address[6] _tokensAndAddresses, uint256[5] _volumes, bytes32 _orderMatchID, uint256 _expiryBlockNumber) Parameters Name Type Description address[6] _tokensAndAddresses Address uint256[5] _volumes String Total volume bytes32 _orderMatchID String Order match ID uint256 _expiryBlockNumber String Block expiry number fillOrderMatch function fillOrderMatch(address[6] _tokensAndAddresses, uint256[5] _volumes, uint256 _expiryBlockNumber, bytes32 _orderMatchID,uint8 v, bytes32 r, bytes32 s) Parameters Name Type Description address[6] _tokensAndAddresses Address Tokens and address uint256[5] _volumes String Total volume uint256 _expiryBlockNumber String Block expiry number bytes32 _orderMatchID String Order match ID uint8 v String Signature module bytes32 r String Signature module bytes32 s String Signature module balanceOf function balanceOf(address _depositor) Parameters Name Type Description address _depositor Address Depositor Address balanceOfToken function balanceOfToken(address _depositor, address _token) Parameters Name Type Description address _depositor Address Depositor Address address _token Address Token address deposit function deposit(address _depositor) Parameters Name Type Description address _depositor Address Depositor address depositTokens function depositTokens(address _depositor, address _token, uint256 _amount) Parameters Name Type Description address _depositor Address Depositor address address _token Address Token address uint256 _amount String Amount withdrawTo function withdrawTo(address _to, uint256 _amount) Parameters Name Type Description address _to Address Receivers address uint256 _amount String Total amount withdrawTokenTo function withdrawTokenTo(address _to, address _token, uint256 _amount) Parameters Name Type Description address _to Address Receivers address address _token Address Token address uint256 _amount String Total amount moveToSafetyWallet function moveToSafetyWallet() Parameters Name Type Description walletTransfer function walletTransfer(address _from, address _to, address _token, uint256 _amount) Parameters Name Type Description address _from Address Senders address address _to Address Receivers address address _token Address Token address uint256 _amount String Total amount OrderBook function OrderBook(address _newApprover, address _newWallet, address _dataStore) Parameters Name Type Description address _newApprover Address Approvers address address _newWallet Address New Wallet address address _dataStore Address Data store address Order Vault addOwner Add a particular owner to a vault. function addOwner(address newOwner) Parameters Name Type Description address newOwner Address New Owner address removeOwner Remove ownership of a particualar address. function removeOwner(address _owner) Parameters Name Type Description address _owner Address Owner address OrderVault Order a new Vault. function OrderVault() Parameters Name Type Description openVault Opening up a new vault. function openVault(uint256 _startTime, uint256 _closureTime) Parameters Name Type Description uint256 _startTime String Start time of the vault uint256 _closureTime String Expiry time for the vault extendVault Extend the vault. function extendVault(uint256 _closureTime) Parameters Name Type Description uint256 _closureTime String Expiry time for the basket closeVault Closing the vault. function closeVault() Parameters Name Type Description storeInVault Store the values on the valut. function storeInVault(bytes32 _orderHash, bytes32 _orderID) Parameters Name Type Description bytes32 _orderHash TxHash Transaction Hash bytes32 _orderID String Order ID sealVault Set the value for a particular asset on the exchange. function sealVault() Parameters Name Type Description getNumberOfOders Get the number of orders on the exchange that are being placed. function getNumberOfOders() Parameters Name Type Description orderLocated Locate the order. Which address owns the new contract. function orderLocated(bytes32 _hash, bytes32 _orderID) Parameters Name Type Description bytes32 _hash String Transaction Hash bytes32 _orderID String Order ID Ownable Ownable Identify who own the contract. function Ownable() Parameters Name Type Description transferOwnership Transfer ownership from one address to another. function transferOwnership(address newOwner) Parameters Name Type Description address newOwner Address Address of the owner","title":"Wanchain"},{"location":"wansmartcontracts/#wanchain-smart-contracts-basket-and-dex","text":"","title":"Wanchain Smart Contracts - (Basket and DEX)"},{"location":"wansmartcontracts/#one-way-dex","text":"","title":"One Way Dex"},{"location":"wansmartcontracts/#two-way-dex","text":"","title":"Two Way Dex"},{"location":"wansmartcontracts/#very-basic-portfolio","text":"","title":"Very Basic Portfolio"},{"location":"wansmartcontracts/#vbp","text":"","title":"VBP"},{"location":"wansmartcontracts/#vbp-exchange","text":"","title":"VBP Exchange"},{"location":"wansmartcontracts/#recurrent-portfolio","text":"","title":"Recurrent Portfolio"},{"location":"wansmartcontracts/#recurrentportfolio","text":"","title":"RecurrentPortfolio"},{"location":"wansmartcontracts/#recurrentportfolio-exchange","text":"","title":"RecurrentPortfolio Exchange"},{"location":"wansmartcontracts/#order-book","text":"","title":"Order Book"},{"location":"wansmartcontracts/#authentication","text":"","title":"Authentication"},{"location":"wansmartcontracts/#authentication-multi-owner","text":"","title":"Authentication Multi-Owner"},{"location":"wansmartcontracts/#orderbook","text":"","title":"OrderBook"},{"location":"wansmartcontracts/#order-vault","text":"","title":"Order Vault"},{"location":"wansmartcontracts/#ownable","text":"","title":"Ownable"}]}