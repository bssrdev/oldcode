{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"WandX Documentation WandX is a secure way to trade digital assets with a custom Basket protocol enabling users to hedge and balance out risk. In this documentation, we describe all the products built by WandX, how the community can use these products, as well as how different players in the crypto space can use our products. This is done through tutorials, SDK and API documentation. Navigation Getting Started : The objective of this documentation is to create an open source repository for developers and companies to be able to use the various products built by WandX to further their development goals. These products include: A decentralized exchange built on the NEO Blockchain, AION Blockchain, Wanchain Blockchain. We have SDKs and APIs that enables any existing exchange or upcoming exchange to integrate our decentralized exchange on any of the above Blockchains in less than a few hours. We have built a micro-app that enables any token based website to enable their users to trade their Token within their website itself. The custom Basket Protocol that enables users to trade in portfolios of Tokens on either the Ethereum Blockchain, NEO Blockchain, AION Blockchain, Wanchain Blockchain. This protocol can be applied in various ways: a. To enable users to hedge their portfolios, to buy into a Basket of say exchange Tokens. b. To build a decentralized ETF kind of application. c. To trade in large amounts of a single Token, entirely peer to peer, without affecting the price of the Token. The Tokens can be ERC20 Tokens, WRC20 Tokens, ATS Tokens, or NEP5 Tokens. We have built backend infrastructure for the AION, Wanchain, NEO, EOS Blockchains to make it easy for any Dapp developers to be able to develop on any of these Blockchains. Dapp developers do not need to worry about connecting to the Blockchain, making calls to the Blockchain etc. All that would be taken care of by the infra that we've built. Tutorials : Watch some our video tutorials, as well as go through our tutorial documentation to integrate our Basket Protocol into your application, our DEX into your exchange, or use our infrastructure built for AION, Wanchain, EOS, NEO to be able to build Dapps seamlessly on these Blockchains. Project Ideas : We'd be very interested to collaborate with projects building on our protocol, infrastructure, or on our DEX. Those interested to collaborate outside of our platform, but feel that the collaboration would be mutually beneficial, do fill out this form and we'll get in touch with you shortly. Smart Contracts : All our smart contracts built on Ethereum, NEO, AION, Wanchain can be seen on our Github Integrations : Users, developers, projects can integrate our protocol and architecture into their products. Additional Resources : Users can see additional resources over on our website and Blog Support and Community If you have any questions about WandX, you can get direct access to our team and other members of the community through Slack and Telegram. We are looking for integration partners to build on and expand WandX. WandX Community Telegram Slack Channel","title":"Home"},{"location":"#wandx-documentation","text":"WandX is a secure way to trade digital assets with a custom Basket protocol enabling users to hedge and balance out risk. In this documentation, we describe all the products built by WandX, how the community can use these products, as well as how different players in the crypto space can use our products. This is done through tutorials, SDK and API documentation.","title":"WandX Documentation"},{"location":"#navigation","text":"Getting Started : The objective of this documentation is to create an open source repository for developers and companies to be able to use the various products built by WandX to further their development goals. These products include: A decentralized exchange built on the NEO Blockchain, AION Blockchain, Wanchain Blockchain. We have SDKs and APIs that enables any existing exchange or upcoming exchange to integrate our decentralized exchange on any of the above Blockchains in less than a few hours. We have built a micro-app that enables any token based website to enable their users to trade their Token within their website itself. The custom Basket Protocol that enables users to trade in portfolios of Tokens on either the Ethereum Blockchain, NEO Blockchain, AION Blockchain, Wanchain Blockchain. This protocol can be applied in various ways: a. To enable users to hedge their portfolios, to buy into a Basket of say exchange Tokens. b. To build a decentralized ETF kind of application. c. To trade in large amounts of a single Token, entirely peer to peer, without affecting the price of the Token. The Tokens can be ERC20 Tokens, WRC20 Tokens, ATS Tokens, or NEP5 Tokens. We have built backend infrastructure for the AION, Wanchain, NEO, EOS Blockchains to make it easy for any Dapp developers to be able to develop on any of these Blockchains. Dapp developers do not need to worry about connecting to the Blockchain, making calls to the Blockchain etc. All that would be taken care of by the infra that we've built. Tutorials : Watch some our video tutorials, as well as go through our tutorial documentation to integrate our Basket Protocol into your application, our DEX into your exchange, or use our infrastructure built for AION, Wanchain, EOS, NEO to be able to build Dapps seamlessly on these Blockchains. Project Ideas : We'd be very interested to collaborate with projects building on our protocol, infrastructure, or on our DEX. Those interested to collaborate outside of our platform, but feel that the collaboration would be mutually beneficial, do fill out this form and we'll get in touch with you shortly. Smart Contracts : All our smart contracts built on Ethereum, NEO, AION, Wanchain can be seen on our Github Integrations : Users, developers, projects can integrate our protocol and architecture into their products. Additional Resources : Users can see additional resources over on our website and Blog","title":"Navigation"},{"location":"#support-and-community","text":"If you have any questions about WandX, you can get direct access to our team and other members of the community through Slack and Telegram. We are looking for integration partners to build on and expand WandX. WandX Community Telegram Slack Channel","title":"Support and Community"},{"location":"basketprotocol/","text":"Basket Protocol Using the WandX Basket protocol to enable creation of Baskets of ERC20 or ERC223 Tokens, to enable trading a large amount of a single Token entirely peer to peer through a single transaction without affecting the price of the Token as there wouldn't be any API through which the price is determined.","title":"Basket Protocol"},{"location":"basketprotocol/#basket-protocol","text":"Using the WandX Basket protocol to enable creation of Baskets of ERC20 or ERC223 Tokens, to enable trading a large amount of a single Token entirely peer to peer through a single transaction without affecting the price of the Token as there wouldn't be any API through which the price is determined.","title":"Basket Protocol"},{"location":"comingsoon/","text":"Coming Soon","title":"API"},{"location":"comingsoon/#coming-soon","text":"","title":"Coming Soon"},{"location":"decentralizedexchange/","text":"Decentralized Exchange The WandX decentralized exchange built on the Ethereum platform enables users to trade ETH-ERC20 or ERC20-ERC20 through our escrow based smart contract. WandX decentralized exchange is an exchange market that does not rely on a third party service to hold the customer's funds. Instead, trades occur directly between users (peer to peer) through an automated process. This system can be achieved by creating proxy tokens (crypto assets that represent a certain fiat or crypto currency) or assets (that can represent shares in a company for example) or through a decentralized multi-signature escrow system, among other solutions that are currently being developed. This system contrasts with the current centralized model in which users deposit their funds and the exchange issues an IOU that can be freely traded on the platform. When a user asks to withdraw his funds, these are converted back into the cryptocurrency they represent and sent to their owner. Benefits The most obvious benefit to using a decentralized exchange over a centralized one is their \"trustless\" nature. You are not required to trust the security or honesty of the exchange since the funds are held by you in your personal wallet and not by a third party. Another advantage to the decentralized model is the privacy it provides. Users are not required to disclose their personal details to anyone, except if the exchange method involves bank transfers, in which case your identity is revealed only to the person that is selling or buying from you. Furthermore, the hosting of decentralized exchanges is distributed through nodes meaning that there is no risk of server downtime. DEX Smart Contracts The github repository with the smart contract solidity source code and unit tests related to DEX DEX_1 DEX_2 Payment Channels Payment channels on Ethereum are used to enable multiple payments between two parties without paying gas fees for every transaction. This enables two parties to enter into a long term contract, while maintaining a regular payment scheduled that's automated on the payment smart contracts. Buy Create a buy order Update or Cancel Buy Order Fill Order Sell Create a sell order Update or Cancel sell Order Fill Order","title":"Decentralized Exchange"},{"location":"decentralizedexchange/#decentralized-exchange","text":"The WandX decentralized exchange built on the Ethereum platform enables users to trade ETH-ERC20 or ERC20-ERC20 through our escrow based smart contract. WandX decentralized exchange is an exchange market that does not rely on a third party service to hold the customer's funds. Instead, trades occur directly between users (peer to peer) through an automated process. This system can be achieved by creating proxy tokens (crypto assets that represent a certain fiat or crypto currency) or assets (that can represent shares in a company for example) or through a decentralized multi-signature escrow system, among other solutions that are currently being developed. This system contrasts with the current centralized model in which users deposit their funds and the exchange issues an IOU that can be freely traded on the platform. When a user asks to withdraw his funds, these are converted back into the cryptocurrency they represent and sent to their owner.","title":"Decentralized Exchange"},{"location":"decentralizedexchange/#benefits","text":"The most obvious benefit to using a decentralized exchange over a centralized one is their \"trustless\" nature. You are not required to trust the security or honesty of the exchange since the funds are held by you in your personal wallet and not by a third party. Another advantage to the decentralized model is the privacy it provides. Users are not required to disclose their personal details to anyone, except if the exchange method involves bank transfers, in which case your identity is revealed only to the person that is selling or buying from you. Furthermore, the hosting of decentralized exchanges is distributed through nodes meaning that there is no risk of server downtime.","title":"Benefits"},{"location":"decentralizedexchange/#dex-smart-contracts","text":"The github repository with the smart contract solidity source code and unit tests related to DEX DEX_1 DEX_2","title":"DEX Smart Contracts"},{"location":"decentralizedexchange/#payment-channels","text":"Payment channels on Ethereum are used to enable multiple payments between two parties without paying gas fees for every transaction. This enables two parties to enter into a long term contract, while maintaining a regular payment scheduled that's automated on the payment smart contracts.","title":"Payment Channels"},{"location":"decentralizedexchange/#buy","text":"","title":"Buy"},{"location":"decentralizedexchange/#create-a-buy-order","text":"","title":"Create a buy order"},{"location":"decentralizedexchange/#update-or-cancel-buy-order","text":"","title":"Update or Cancel Buy Order"},{"location":"decentralizedexchange/#fill-order","text":"","title":"Fill Order"},{"location":"decentralizedexchange/#sell","text":"","title":"Sell"},{"location":"decentralizedexchange/#create-a-sell-order","text":"","title":"Create a sell order"},{"location":"decentralizedexchange/#update-or-cancel-sell-order","text":"","title":"Update or Cancel sell Order"},{"location":"decentralizedexchange/#fill-order_1","text":"","title":"Fill Order"},{"location":"furtherreference/","text":"Further Reference Advanced Topics Units and Natural Units Here, we cover how unit amounts are defined and calculated in WnadX tokens. In the ERC20 standard, each token has a base unit that is defined by its decimals property. For example, a WnadX token\u2019s decimals is 18, meaning its base unit is 10 ** -18 of one WnadX. Intuitively, it makes sense to tie a certain amount of a component\u2018s base unit to one WnadX token to calculate the component allocation of the WnadX. However, this becomes problematic when a component token has a significantly lower decimals value than a WnadX. Take for example Airswap (AST), which uses only 4 decimal places, this makes their token far less divisible. As a consequence, say we want to issue 10 ** 13 of a WnadX that contains AST, there\u2018s a chance that the issuance would require transferring partial amounts of an AST base unit, which is not possible, and thus would leave the WnadX token undercollateralized. To combat this problem, instead of tying component base unit amounts to one WnadX Token, we can tie the component base unit amounts to some quantity of WnadX token base units. This is what the natural unit of a WnadX is for: it defines the amount of WnadX token base units to tie component token amounts to. In order to make this work there is a lower bound on what the natural unit can be, which is 10 ** (18 - minimumDecimal) where minimumDecimal is the lowest decimal value of the component tokens comprising the WnadX. Furthermore in order to avoid rounding errors in issuance and redemption, all issue and redeem quantities must be multiples of the natural unit. For a more thorough treatment, including an example, see section 5.2.1 of our White Paper . Advanced Resources Whitepaper Contracts Github WandX Blog Posts WandX\u2019s Basket Protocol WandX Decentralized Exchange and basket protocol release 1.0 Paving The Future With Smart Contracts WandX : The Multi-Blockchain DEX and Basket protocol","title":"Further Referencece"},{"location":"furtherreference/#further-reference","text":"","title":"Further Reference"},{"location":"furtherreference/#advanced-topics","text":"","title":"Advanced Topics"},{"location":"furtherreference/#units-and-natural-units","text":"Here, we cover how unit amounts are defined and calculated in WnadX tokens. In the ERC20 standard, each token has a base unit that is defined by its decimals property. For example, a WnadX token\u2019s decimals is 18, meaning its base unit is 10 ** -18 of one WnadX. Intuitively, it makes sense to tie a certain amount of a component\u2018s base unit to one WnadX token to calculate the component allocation of the WnadX. However, this becomes problematic when a component token has a significantly lower decimals value than a WnadX. Take for example Airswap (AST), which uses only 4 decimal places, this makes their token far less divisible. As a consequence, say we want to issue 10 ** 13 of a WnadX that contains AST, there\u2018s a chance that the issuance would require transferring partial amounts of an AST base unit, which is not possible, and thus would leave the WnadX token undercollateralized. To combat this problem, instead of tying component base unit amounts to one WnadX Token, we can tie the component base unit amounts to some quantity of WnadX token base units. This is what the natural unit of a WnadX is for: it defines the amount of WnadX token base units to tie component token amounts to. In order to make this work there is a lower bound on what the natural unit can be, which is 10 ** (18 - minimumDecimal) where minimumDecimal is the lowest decimal value of the component tokens comprising the WnadX. Furthermore in order to avoid rounding errors in issuance and redemption, all issue and redeem quantities must be multiples of the natural unit. For a more thorough treatment, including an example, see section 5.2.1 of our White Paper .","title":"Units and Natural Units"},{"location":"furtherreference/#advanced-resources","text":"Whitepaper Contracts Github","title":"Advanced Resources"},{"location":"furtherreference/#wandx-blog-posts","text":"WandX\u2019s Basket Protocol WandX Decentralized Exchange and basket protocol release 1.0 Paving The Future With Smart Contracts WandX : The Multi-Blockchain DEX and Basket protocol","title":"WandX Blog Posts"},{"location":"gettingstarted/","text":"Getting Started Now that we got that out of the way, let\u2019s get started \ud83d\ude80 Concepts Installation Usage Blockchain Setup Web3 Summary","title":"Getting Started"},{"location":"gettingstarted/#getting-started","text":"Now that we got that out of the way, let\u2019s get started \ud83d\ude80","title":"Getting Started"},{"location":"gettingstarted/#concepts","text":"","title":"Concepts"},{"location":"gettingstarted/#installation","text":"","title":"Installation"},{"location":"gettingstarted/#usage","text":"","title":"Usage"},{"location":"gettingstarted/#blockchain-setup","text":"","title":"Blockchain Setup"},{"location":"gettingstarted/#web3","text":"","title":"Web3"},{"location":"gettingstarted/#summary","text":"","title":"Summary"},{"location":"infrasolution/","text":"Infura like Infra","title":"Infra"},{"location":"infrasolution/#infura-like-infra","text":"","title":"Infura like Infra"},{"location":"smartcontracts/","text":"Smart Contracts Set is a smart contract framework for building collateralized baskets of tokenized assets. Set uses a modular system of Ethereum smart contracts where components can be added, upgraded, or removed without requiring an overhaul of the system. Our main resources for learning more are below: Whitepaper : A document documenting the motivation and specification for the protocol. Contracts Github : A document documenting the motivation and specification for the protocol. Architecture Image of the Architecture will come here. Core.sol This public-facing smart contract contains all the business logic and external functions associated with creating, issuing, rebalancing, and redeeming Sets. Core serves as a kernel that orchestrates interactions between the various other smart contracts. TransferProxy.sol This smart contract facilitates the transfer of ERC20 tokens for all transactions. Users who wish to utilize their tokens must authorize the TransferProxy contract to move their tokens by calling the ERC20-compliant token\u2019s approve function. The design of a centralized TransferProxy contract is intended to minimize the number of overall number of ERC20 approve transactions required in the system. Vault.sol This smart contract stores all the Set\u2019s component and contains mappings to track ownership of assets. Vault\u2019s accounting interfaces are only available to Core. SetTokenFactory.sol This smart contract contains the template for a specific type of Set and facilitates the creation of all Set token contracts. Creators can create a new Set token by calling Core\u2019s create function and supplying the Factory address and the required parameters. For a Factory to be valid, it needs to be registered with Core. Initially, there will be a SetTokenFactory (creating standard Sets) and RebalancingTokenFactory (a factory for creating Rebalancing Set tokens). SetToken.sol This ERC-20 compliant smart contract represents an unique Set with specified ERC-20 components and units and tracks balances of the Set tokens. Each Set token smart contract is created by a Factory and is tracked by Core. Each smart contract exposes mint and burn functions that only Core could call during issuance and redemption. IExchangeWrapper.sol This smart contract serves as a conduit between decentralized exchanges and Core to facilitate component-acquisition in an issuance order. Each exchange wrapper contract exposes a common exchange function that accepts a bytes string that encodes exchange messages. The ExchangeWrapper is responsible for parsing call data conforming to an exchange's interface (\u201cexchange messages\u201d) and executing each order as the taker of each transaction. Initially, we will be supporting withdrawing tokens from the submitter\u2019s wallet and 0x Exchange Version 2. RebalancingSetTokenFactory.sol This smart contract contains a template for a specific type of Rebalancing Set and facilitates the creation of all Rebalancing Set token contracts. Creators can create a new Rebalancing Set token by calling Core's create function and supplying the Factory address and required parameters similar to the SetTokenFactory contract. Rebalancing Set tokens deployed by this factory can only have their mint and burn functions called by Core. RebalancingSetToken.sol This ERC-20 compliant smart contract represents an unique Rebalancing Set with specified ERC-20 components and units and tracks balances of the Rebalancing Set tokens. Each Rebalancing Set token smart contract is created by the RebalancingSetTokenFactory and is tracked by Core. Each smart contract contains additional data and functions unique to a Rebalancing Set. Deployed Contracts Kovan Testnet Contract Address Core 0xc89092a43287c12cfe87c8631b718176ea702d18 SetTokenFactory 0xa4c8d565719fefd8cf79d1178bbf262cbe659af2 Ropsten Testnet Contract Address Core 0xc89092a43287c12cfe87c8631b718176ea702d18 SetTokenFactory 0xa4c8d565719fefd8cf79d1178bbf262cbe659af2","title":"Smart Contracts"},{"location":"smartcontracts/#smart-contracts","text":"Set is a smart contract framework for building collateralized baskets of tokenized assets. Set uses a modular system of Ethereum smart contracts where components can be added, upgraded, or removed without requiring an overhaul of the system. Our main resources for learning more are below: Whitepaper : A document documenting the motivation and specification for the protocol. Contracts Github : A document documenting the motivation and specification for the protocol.","title":"Smart Contracts"},{"location":"smartcontracts/#architecture","text":"Image of the Architecture will come here.","title":"Architecture"},{"location":"smartcontracts/#coresol","text":"This public-facing smart contract contains all the business logic and external functions associated with creating, issuing, rebalancing, and redeeming Sets. Core serves as a kernel that orchestrates interactions between the various other smart contracts.","title":"Core.sol"},{"location":"smartcontracts/#transferproxysol","text":"This smart contract facilitates the transfer of ERC20 tokens for all transactions. Users who wish to utilize their tokens must authorize the TransferProxy contract to move their tokens by calling the ERC20-compliant token\u2019s approve function. The design of a centralized TransferProxy contract is intended to minimize the number of overall number of ERC20 approve transactions required in the system.","title":"TransferProxy.sol"},{"location":"smartcontracts/#vaultsol","text":"This smart contract stores all the Set\u2019s component and contains mappings to track ownership of assets. Vault\u2019s accounting interfaces are only available to Core.","title":"Vault.sol"},{"location":"smartcontracts/#settokenfactorysol","text":"This smart contract contains the template for a specific type of Set and facilitates the creation of all Set token contracts. Creators can create a new Set token by calling Core\u2019s create function and supplying the Factory address and the required parameters. For a Factory to be valid, it needs to be registered with Core. Initially, there will be a SetTokenFactory (creating standard Sets) and RebalancingTokenFactory (a factory for creating Rebalancing Set tokens).","title":"SetTokenFactory.sol"},{"location":"smartcontracts/#settokensol","text":"This ERC-20 compliant smart contract represents an unique Set with specified ERC-20 components and units and tracks balances of the Set tokens. Each Set token smart contract is created by a Factory and is tracked by Core. Each smart contract exposes mint and burn functions that only Core could call during issuance and redemption.","title":"SetToken.sol"},{"location":"smartcontracts/#iexchangewrappersol","text":"This smart contract serves as a conduit between decentralized exchanges and Core to facilitate component-acquisition in an issuance order. Each exchange wrapper contract exposes a common exchange function that accepts a bytes string that encodes exchange messages. The ExchangeWrapper is responsible for parsing call data conforming to an exchange's interface (\u201cexchange messages\u201d) and executing each order as the taker of each transaction. Initially, we will be supporting withdrawing tokens from the submitter\u2019s wallet and 0x Exchange Version 2.","title":"IExchangeWrapper.sol"},{"location":"smartcontracts/#rebalancingsettokenfactorysol","text":"This smart contract contains a template for a specific type of Rebalancing Set and facilitates the creation of all Rebalancing Set token contracts. Creators can create a new Rebalancing Set token by calling Core's create function and supplying the Factory address and required parameters similar to the SetTokenFactory contract. Rebalancing Set tokens deployed by this factory can only have their mint and burn functions called by Core.","title":"RebalancingSetTokenFactory.sol"},{"location":"smartcontracts/#rebalancingsettokensol","text":"This ERC-20 compliant smart contract represents an unique Rebalancing Set with specified ERC-20 components and units and tracks balances of the Rebalancing Set tokens. Each Rebalancing Set token smart contract is created by the RebalancingSetTokenFactory and is tracked by Core. Each smart contract contains additional data and functions unique to a Rebalancing Set.","title":"RebalancingSetToken.sol"},{"location":"smartcontracts/#deployed-contracts","text":"","title":"Deployed Contracts"},{"location":"smartcontracts/#kovan-testnet","text":"Contract Address Core 0xc89092a43287c12cfe87c8631b718176ea702d18 SetTokenFactory 0xa4c8d565719fefd8cf79d1178bbf262cbe659af2","title":"Kovan Testnet"},{"location":"smartcontracts/#ropsten-testnet","text":"Contract Address Core 0xc89092a43287c12cfe87c8631b718176ea702d18 SetTokenFactory 0xa4c8d565719fefd8cf79d1178bbf262cbe659af2","title":"Ropsten Testnet"}]}