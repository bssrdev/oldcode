{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"WandX Documentation WandX is a protocol for collateralized baskets of tokenized assets that is built using Ethereum smart contracts. In our developer portal, you can find tutorials that will teach you how to build applications that utilize WandX, documentation about our smart contracts and javascript library, and links for further reference. Navigation Getting Started with local development by installing the required dependencies and connecting with a test blockchain. Tutorials guide you through building simple decentralized applications that incorporate WandX functionality. Project Ideas contains project ideas that can be built using WandX. Smart Contracts has information about everything smart contract related from an overview of the architecture to links to the WandX whitepaper and repositories. wnadxprotocol.js API Reference provides detailed information our Javascript library including sample usages. Additional Resources has links to other venues to learn more about WandX. Support and Community If you have any questions about WandX, you can get direct access to our team and other members of the community through Slack and Telegram. We are looking for integration partners to build on and expand WandX. WandX Community Telegram Slack Channel","title":"Home"},{"location":"#wandx-documentation","text":"WandX is a protocol for collateralized baskets of tokenized assets that is built using Ethereum smart contracts. In our developer portal, you can find tutorials that will teach you how to build applications that utilize WandX, documentation about our smart contracts and javascript library, and links for further reference.","title":"WandX Documentation"},{"location":"#navigation","text":"Getting Started with local development by installing the required dependencies and connecting with a test blockchain. Tutorials guide you through building simple decentralized applications that incorporate WandX functionality. Project Ideas contains project ideas that can be built using WandX. Smart Contracts has information about everything smart contract related from an overview of the architecture to links to the WandX whitepaper and repositories. wnadxprotocol.js API Reference provides detailed information our Javascript library including sample usages. Additional Resources has links to other venues to learn more about WandX.","title":"Navigation"},{"location":"#support-and-community","text":"If you have any questions about WandX, you can get direct access to our team and other members of the community through Slack and Telegram. We are looking for integration partners to build on and expand WandX. WandX Community Telegram Slack Channel","title":"Support and Community"},{"location":"comingsoon/","text":"Coming Soon","title":"API"},{"location":"comingsoon/#coming-soon","text":"","title":"Coming Soon"},{"location":"furtherreference/","text":"Further Reference Advanced Topics Units and Natural Units Here, we cover how unit amounts are defined and calculated in WnadX tokens. In the ERC20 standard, each token has a base unit that is defined by its decimals property. For example, a WnadX token\u2019s decimals is 18, meaning its base unit is 10 ** -18 of one WnadX. Intuitively, it makes sense to tie a certain amount of a component\u2018s base unit to one WnadX token to calculate the component allocation of the WnadX. However, this becomes problematic when a component token has a significantly lower decimals value than a WnadX. Take for example Airswap (AST), which uses only 4 decimal places, this makes their token far less divisible. As a consequence, say we want to issue 10 ** 13 of a WnadX that contains AST, there\u2018s a chance that the issuance would require transferring partial amounts of an AST base unit, which is not possible, and thus would leave the WnadX token undercollateralized. To combat this problem, instead of tying component base unit amounts to one WnadX Token, we can tie the component base unit amounts to some quantity of WnadX token base units. This is what the natural unit of a WnadX is for: it defines the amount of WnadX token base units to tie component token amounts to. In order to make this work there is a lower bound on what the natural unit can be, which is 10 ** (18 - minimumDecimal) where minimumDecimal is the lowest decimal value of the component tokens comprising the WnadX. Furthermore in order to avoid rounding errors in issuance and redemption, all issue and redeem quantities must be multiples of the natural unit. For a more thorough treatment, including an example, see section 5.2.1 of our White Paper . Advanced Resources Whitepaper Contracts Github WandX Blog Posts WandX\u2019s Basket Protocol WandX Decentralized Exchange and basket protocol release 1.0 Paving The Future With Smart Contracts WandX : The Multi-Blockchain DEX and Basket protocol","title":"Further Referencece"},{"location":"furtherreference/#further-reference","text":"","title":"Further Reference"},{"location":"furtherreference/#advanced-topics","text":"","title":"Advanced Topics"},{"location":"furtherreference/#units-and-natural-units","text":"Here, we cover how unit amounts are defined and calculated in WnadX tokens. In the ERC20 standard, each token has a base unit that is defined by its decimals property. For example, a WnadX token\u2019s decimals is 18, meaning its base unit is 10 ** -18 of one WnadX. Intuitively, it makes sense to tie a certain amount of a component\u2018s base unit to one WnadX token to calculate the component allocation of the WnadX. However, this becomes problematic when a component token has a significantly lower decimals value than a WnadX. Take for example Airswap (AST), which uses only 4 decimal places, this makes their token far less divisible. As a consequence, say we want to issue 10 ** 13 of a WnadX that contains AST, there\u2018s a chance that the issuance would require transferring partial amounts of an AST base unit, which is not possible, and thus would leave the WnadX token undercollateralized. To combat this problem, instead of tying component base unit amounts to one WnadX Token, we can tie the component base unit amounts to some quantity of WnadX token base units. This is what the natural unit of a WnadX is for: it defines the amount of WnadX token base units to tie component token amounts to. In order to make this work there is a lower bound on what the natural unit can be, which is 10 ** (18 - minimumDecimal) where minimumDecimal is the lowest decimal value of the component tokens comprising the WnadX. Furthermore in order to avoid rounding errors in issuance and redemption, all issue and redeem quantities must be multiples of the natural unit. For a more thorough treatment, including an example, see section 5.2.1 of our White Paper .","title":"Units and Natural Units"},{"location":"furtherreference/#advanced-resources","text":"Whitepaper Contracts Github","title":"Advanced Resources"},{"location":"furtherreference/#wandx-blog-posts","text":"WandX\u2019s Basket Protocol WandX Decentralized Exchange and basket protocol release 1.0 Paving The Future With Smart Contracts WandX : The Multi-Blockchain DEX and Basket protocol","title":"WandX Blog Posts"},{"location":"gettingstarted/","text":"Getting Started Now that we got that out of the way, let\u2019s get started \ud83d\ude80 Concepts Installation Usage Blockchain Setup Web3 Summary","title":"Getting Started"},{"location":"gettingstarted/#getting-started","text":"Now that we got that out of the way, let\u2019s get started \ud83d\ude80","title":"Getting Started"},{"location":"gettingstarted/#concepts","text":"","title":"Concepts"},{"location":"gettingstarted/#installation","text":"","title":"Installation"},{"location":"gettingstarted/#usage","text":"","title":"Usage"},{"location":"gettingstarted/#blockchain-setup","text":"","title":"Blockchain Setup"},{"location":"gettingstarted/#web3","text":"","title":"Web3"},{"location":"gettingstarted/#summary","text":"","title":"Summary"},{"location":"smartcontracts/","text":"Smart Contracts Set is a smart contract framework for building collateralized baskets of tokenized assets. Set uses a modular system of Ethereum smart contracts where components can be added, upgraded, or removed without requiring an overhaul of the system. Our main resources for learning more are below: Whitepaper : A document documenting the motivation and specification for the protocol. Contracts Github : A document documenting the motivation and specification for the protocol. Architecture Image of the Architecture will come here. Core.sol This public-facing smart contract contains all the business logic and external functions associated with creating, issuing, rebalancing, and redeeming Sets. Core serves as a kernel that orchestrates interactions between the various other smart contracts. TransferProxy.sol This smart contract facilitates the transfer of ERC20 tokens for all transactions. Users who wish to utilize their tokens must authorize the TransferProxy contract to move their tokens by calling the ERC20-compliant token\u2019s approve function. The design of a centralized TransferProxy contract is intended to minimize the number of overall number of ERC20 approve transactions required in the system. Vault.sol This smart contract stores all the Set\u2019s component and contains mappings to track ownership of assets. Vault\u2019s accounting interfaces are only available to Core. SetTokenFactory.sol This smart contract contains the template for a specific type of Set and facilitates the creation of all Set token contracts. Creators can create a new Set token by calling Core\u2019s create function and supplying the Factory address and the required parameters. For a Factory to be valid, it needs to be registered with Core. Initially, there will be a SetTokenFactory (creating standard Sets) and RebalancingTokenFactory (a factory for creating Rebalancing Set tokens). SetToken.sol This ERC-20 compliant smart contract represents an unique Set with specified ERC-20 components and units and tracks balances of the Set tokens. Each Set token smart contract is created by a Factory and is tracked by Core. Each smart contract exposes mint and burn functions that only Core could call during issuance and redemption. IExchangeWrapper.sol This smart contract serves as a conduit between decentralized exchanges and Core to facilitate component-acquisition in an issuance order. Each exchange wrapper contract exposes a common exchange function that accepts a bytes string that encodes exchange messages. The ExchangeWrapper is responsible for parsing call data conforming to an exchange's interface (\u201cexchange messages\u201d) and executing each order as the taker of each transaction. Initially, we will be supporting withdrawing tokens from the submitter\u2019s wallet and 0x Exchange Version 2. RebalancingSetTokenFactory.sol This smart contract contains a template for a specific type of Rebalancing Set and facilitates the creation of all Rebalancing Set token contracts. Creators can create a new Rebalancing Set token by calling Core's create function and supplying the Factory address and required parameters similar to the SetTokenFactory contract. Rebalancing Set tokens deployed by this factory can only have their mint and burn functions called by Core. RebalancingSetToken.sol This ERC-20 compliant smart contract represents an unique Rebalancing Set with specified ERC-20 components and units and tracks balances of the Rebalancing Set tokens. Each Rebalancing Set token smart contract is created by the RebalancingSetTokenFactory and is tracked by Core. Each smart contract contains additional data and functions unique to a Rebalancing Set. Deployed Contracts Kovan Testnet Contract Address Core 0xc89092a43287c12cfe87c8631b718176ea702d18 SetTokenFactory 0xa4c8d565719fefd8cf79d1178bbf262cbe659af2 Ropsten Testnet Contract Address Core 0xc89092a43287c12cfe87c8631b718176ea702d18 SetTokenFactory 0xa4c8d565719fefd8cf79d1178bbf262cbe659af2","title":"Smart Contracts"},{"location":"smartcontracts/#smart-contracts","text":"Set is a smart contract framework for building collateralized baskets of tokenized assets. Set uses a modular system of Ethereum smart contracts where components can be added, upgraded, or removed without requiring an overhaul of the system. Our main resources for learning more are below: Whitepaper : A document documenting the motivation and specification for the protocol. Contracts Github : A document documenting the motivation and specification for the protocol.","title":"Smart Contracts"},{"location":"smartcontracts/#architecture","text":"Image of the Architecture will come here.","title":"Architecture"},{"location":"smartcontracts/#coresol","text":"This public-facing smart contract contains all the business logic and external functions associated with creating, issuing, rebalancing, and redeeming Sets. Core serves as a kernel that orchestrates interactions between the various other smart contracts.","title":"Core.sol"},{"location":"smartcontracts/#transferproxysol","text":"This smart contract facilitates the transfer of ERC20 tokens for all transactions. Users who wish to utilize their tokens must authorize the TransferProxy contract to move their tokens by calling the ERC20-compliant token\u2019s approve function. The design of a centralized TransferProxy contract is intended to minimize the number of overall number of ERC20 approve transactions required in the system.","title":"TransferProxy.sol"},{"location":"smartcontracts/#vaultsol","text":"This smart contract stores all the Set\u2019s component and contains mappings to track ownership of assets. Vault\u2019s accounting interfaces are only available to Core.","title":"Vault.sol"},{"location":"smartcontracts/#settokenfactorysol","text":"This smart contract contains the template for a specific type of Set and facilitates the creation of all Set token contracts. Creators can create a new Set token by calling Core\u2019s create function and supplying the Factory address and the required parameters. For a Factory to be valid, it needs to be registered with Core. Initially, there will be a SetTokenFactory (creating standard Sets) and RebalancingTokenFactory (a factory for creating Rebalancing Set tokens).","title":"SetTokenFactory.sol"},{"location":"smartcontracts/#settokensol","text":"This ERC-20 compliant smart contract represents an unique Set with specified ERC-20 components and units and tracks balances of the Set tokens. Each Set token smart contract is created by a Factory and is tracked by Core. Each smart contract exposes mint and burn functions that only Core could call during issuance and redemption.","title":"SetToken.sol"},{"location":"smartcontracts/#iexchangewrappersol","text":"This smart contract serves as a conduit between decentralized exchanges and Core to facilitate component-acquisition in an issuance order. Each exchange wrapper contract exposes a common exchange function that accepts a bytes string that encodes exchange messages. The ExchangeWrapper is responsible for parsing call data conforming to an exchange's interface (\u201cexchange messages\u201d) and executing each order as the taker of each transaction. Initially, we will be supporting withdrawing tokens from the submitter\u2019s wallet and 0x Exchange Version 2.","title":"IExchangeWrapper.sol"},{"location":"smartcontracts/#rebalancingsettokenfactorysol","text":"This smart contract contains a template for a specific type of Rebalancing Set and facilitates the creation of all Rebalancing Set token contracts. Creators can create a new Rebalancing Set token by calling Core's create function and supplying the Factory address and required parameters similar to the SetTokenFactory contract. Rebalancing Set tokens deployed by this factory can only have their mint and burn functions called by Core.","title":"RebalancingSetTokenFactory.sol"},{"location":"smartcontracts/#rebalancingsettokensol","text":"This ERC-20 compliant smart contract represents an unique Rebalancing Set with specified ERC-20 components and units and tracks balances of the Rebalancing Set tokens. Each Rebalancing Set token smart contract is created by the RebalancingSetTokenFactory and is tracked by Core. Each smart contract contains additional data and functions unique to a Rebalancing Set.","title":"RebalancingSetToken.sol"},{"location":"smartcontracts/#deployed-contracts","text":"","title":"Deployed Contracts"},{"location":"smartcontracts/#kovan-testnet","text":"Contract Address Core 0xc89092a43287c12cfe87c8631b718176ea702d18 SetTokenFactory 0xa4c8d565719fefd8cf79d1178bbf262cbe659af2","title":"Kovan Testnet"},{"location":"smartcontracts/#ropsten-testnet","text":"Contract Address Core 0xc89092a43287c12cfe87c8631b718176ea702d18 SetTokenFactory 0xa4c8d565719fefd8cf79d1178bbf262cbe659af2","title":"Ropsten Testnet"}]}